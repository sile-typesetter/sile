#!@LUA@
package.path = (os.getenv("SILE_PATH") and
os.getenv("SILE_PATH").."/?.lua" or "") .. ';?.lua;@SILE_PATH@/?.lua;@SILE_PATH@/lua-libraries/?.lua;@SILE_PATH@/lua-libraries/?/init.lua;lua-libraries/?.lua;lua-libraries/?/init.lua;' .. package.path
package.cpath = package.cpath .. ";core/?.@SHARED_LIB_EXT@;@SILE_LIB_PATH@/?.@SHARED_LIB_EXT@;"
SILE = require("core/sile")
io.stdout:setvbuf 'no'
SILE.parseArguments()
if not os.getenv 'LUA_REPL_RLWRAP' then
  io.stderr:write('This is SILE '..SILE.version..'\n')
end
SILE.init()
if unparsed and unparsed[1] then
  -- Turn slashes around in the event we get passed a path from a Windows shell
  SILE.masterFilename = unparsed[1]:gsub("\\", "/")
  if SILE.preamble then
    print("Loading "..SILE.preamble)
    local c = SILE.resolveFile("classes/"..SILE.preamble)
    local f = SILE.resolveFile(SILE.preamble)
    if c then
      SILE.readFile(c)
    elseif f then
      SILE.readFile(f)
    else
      SILE.require("classes/"..SILE.preamble)
    end
  end
  p,e = pcall(function() SILE.readFile(unparsed[1]) end)
  if not p then
    if e:match(": interrupted!") then
      SILE.outputter:finish()
    else
      io.stderr:write("\nError detected:\n"..e.."\n")
    end
    os.exit(1)
  end
  if SILE.preamble then SILE.documentState.documentClass:finish() end
  io.write("\n")
else
  SILE.repl()
end
