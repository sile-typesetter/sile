#!@LUA@
SYSTEM_SILE_PATH = "@SILE_PATH@"
SYSTEM_SILE_LIB_PATH = "@SILE_LIB_PATH@"
SHARED_LIB_EXT = "@SHARED_LIB_EXT@"

package.path = SYSTEM_SILE_PATH..'/?.lua;'..
  SYSTEM_SILE_PATH..'/lua-libraries/?.lua;'..
  SYSTEM_SILE_PATH..'/lua-libraries/?/init.lua;'..
  'lua-libraries/?.lua;lua-libraries/?/init.lua;' ..
  package.path

local pathvar = os.getenv("SILE_PATH")
if pathvar then
	for path in string.gmatch(pathvar, "[^;]+") do
		package.path =  path .. "/?.lua;" .. package.path
		package.path =  path .. "/?/init.lua;" .. package.path
		package.path =  path .. "/lua-libraries/?.lua;" .. package.path
		package.path =  path .. "/lua-libraries/?/init.lua;" .. package.path
		package.cpath = path .. "/?."..SHARED_LIB_EXT..";" .. package.cpath
		package.cpath = path .. "/core/?."..SHARED_LIB_EXT..";" .. package.cpath
	end
end

package.path = '?.lua;' .. package.path

package.cpath = package.cpath .. ";" ..
  "core/?."..SHARED_LIB_EXT.. ";" ..
  SYSTEM_SILE_LIB_PATH.."/?."..SHARED_LIB_EXT

SILE = require("core/sile")
io.stdout:setvbuf 'no'
SILE.parseArguments()
if not os.getenv 'LUA_REPL_RLWRAP' then
  io.stderr:write('This is SILE '..SILE.version..'\n')
end
SILE.init()
if SILE.masterFilename then
  if SILE.preamble then
    for _, preamble in pairs(SILE.preamble) do
      io.stderr:write("Loading "..preamble)
      local c = SILE.resolveFile("classes/"..preamble)
      local f = SILE.resolveFile(preamble)
      if c then
        SILE.readFile(c)
      elseif f then
        SILE.readFile(f)
      else
        SILE.require("classes/"..preamble)
      end
    end
  end
  if SU.debugging("profile") and pcall(function () require("ProFi") end) then
    ProFi = require 'ProFi'
    ProFi:start()
  end
  p,e = xpcall(function() SILE.readFile(unparsed[1]) end, SILE.errorHandler)
  if not p then
    if type(e) == "string" and e:match(": interrupted!") then
      SILE.outputter:finish()
    else
      io.stderr:write("\nError detected:\n"..e.."\n")
    end
    os.exit(1)
  end
  if SILE.preamble then SILE.documentState.documentClass:finish() end
  io.stderr:write("\n")
  if SU.debugging("profile") and pcall(function () require("ProFi") end) then
    ProFi:stop()
    ProFi:writeReport( 'sile-profile.txt' )
  end
  if SU.debugging("versions") then SILE.shaper.debugVersions() end
else
  SILE.repl()
end
