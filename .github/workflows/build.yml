name: Build

on: [ push, pull_request ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build-ubuntu:
    strategy:
      matrix:
        configuration:
          - [ 'dynamic', '' ]
          - [ 'system', '--with-system-lua-sources' ]
          - [ 'embedded', '--enable-embedded-resources' ]
          - [ 'static', '--enable-embedded-resources --disable-shared --enable-static' ]
    runs-on: ubuntu-22.04
    name: Build Ubuntu ${{ matrix.configuration[0] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache test fonts
        uses: actions/cache@v4
        with:
          path: |
            .fonts
            .sources
          key: fonts-${{ hashFiles('Makefile-fonts') }}
      - name: Cache lua_modules
        uses: actions/cache@v4
        with:
          path: |
            lua_modules
          key: luarocks-${{ hashFiles('Makefile-luarocks', 'sile.rockspec.in', 'Cargo.lock') }}
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install fonts-sil-gentiumplus ghostscript graphviz jq libarchive-tools libfontconfig1-dev libharfbuzz-dev libicu-dev libluajit-5.1-dev libpng-dev luajit lua-sec lua-socket lua-zlib-dev luarocks poppler-utils
      - name: Setup ‘cargo’
        uses: actions-rs/toolchain@v1
      - name: Configure
        run: |
          ./bootstrap.sh
          ./configure \
            --enable-developer-mode \
            --without-developer-tools \
            ZSTD=$(which zstd) \
            --disable-font-variations \
            --with-manual \
            ${{ matrix.configuration[1] }}
          echo "VERSION=$(./build-aux/git-version-gen .tarball-version)" >> $GITHUB_ENV
          echo "MAKEFLAGS=-j$(nproc) -Otarget" >> $GITHUB_ENV
          echo "CARCH=$(uname -m)" >> $GITHUB_ENV
      - name: Make
        run: |
          make
      - name: Package
        run: |
          make dist
      - name: Create vendored crates package
        if: matrix.configuration[0] == 'static' && startsWith(github.ref, 'refs/tags/v')
        run: |
          make vendored-crates
      - name: Upload source dist artifact
        if: matrix.configuration[0] == 'dynamic' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: sile-${{ env.VERSION }}
          path: sile-${{ env.VERSION }}.zip
      - name: Append architecture to static binary
        if: matrix.configuration[0] == 'static'
        run: |
          cp sile sile-${{ env.CARCH }}
          sha256sum sile-${{ env.CARCH }} | tee -a sile-${{ env.VERSION }}.sha256.txt
      - name: Upload static binary artifact
        if: matrix.configuration[0] == 'static' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: sile-${{ env.CARCH }}
          path: sile-${{ env.CARCH }}
      - name: Release
        uses: softprops/action-gh-release@v2
        if: matrix.configuration[0] == 'static' && github.repository == 'sile-typesetter/sile' && startsWith(github.ref, 'refs/tags/v')
        with:
          body_path: sile-${{ env.VERSION }}.md
          files: |
            sile-${{ env.VERSION }}.pdf
            sile-${{ env.VERSION }}.zip
            sile-${{ env.VERSION }}.tar.zst
            sile-vendored-crates-${{ env.VERSION }}.tar.zst
            sile-${{ env.CARCH }}
            sile-${{ env.VERSION }}.sha256.txt

  build-from-dist:
    runs-on: ubuntu-22.04
    name: Build from source tarball without automake
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache lua_modules
        uses: actions/cache@v4
        with:
          path: |
            lua_modules
          key: luarocks-${{ hashFiles('Makefile-luarocks', 'sile.rockspec.in', 'Cargo.lock') }}
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install jq libarchive-tools libfontconfig1-dev libharfbuzz-dev libicu-dev libluajit-5.1-dev libpng-dev luajit lua-sec lua-socket lua-zlib-dev luarocks
      - name: Configure
        run: |
          ./bootstrap.sh
          ./configure \
              FCMATCH=true \
              PDFINFO=false \
            --enable-developer-mode \
            --without-developer-tools \
              DOCKER=$(which docker) \
            --disable-font-variations \
            --with-system-lua-sources \
            --without-manual
          echo "VERSION=$(./build-aux/git-version-gen .tarball-version)" >> $GITHUB_ENV
          echo "MAKEFLAGS=-j$(nproc) -Otarget" >> $GITHUB_ENV
      - name: Package
        run: |
          make fake-manual
          make distdir
      - name: Build from dist tree
        run: |
          make docker-test-dist

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    env:
      CFLAGS: "-I/opt/homebrew/include/luajit-2.1 -I/opt/homebrew/include"
      OBJCFLAGS: "-I/opt/homebrew/include/luajit-2.1 -I/opt/homebrew/include"
      LDFLAGS: "-L/opt/homebrew/lib"
      DOCKER: false
      LDOC: false
      NIX: false
      SHA256SUM: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache test fonts
        uses: actions/cache@v4
        with:
          path: |
            .fonts
            .sources
          key: fonts-${{ hashFiles('Makefile-fonts') }}
      - name: Cache lua_modules
        uses: actions/cache@v4
        with:
          path: |
            lua_modules
          key: luarocks-${{ hashFiles('Makefile-luarocks', 'sile.rockspec.in', 'Cargo.lock') }}
      - name: Install system dependencies
        run: |
          brew install \
            autoconf \
            automake \
            expat \
            ghostscript \
            graphviz \
            libtool \
            luajit \
            luarocks \
            poppler \
            rust \
            unzip \
            zlib
          brew link icu4c@77 --force
          brew link zlib --force
          brew link expat --force
          brew install --cask font-gentium-plus
      - name: Configure
        run: |
          ./bootstrap.sh
          ./configure \
            --enable-developer-mode \
            --without-developer-tools \
            --with-system-lua-sources \
            --with-manual
          echo "VERSION=$(./build-aux/git-version-gen .tarball-version)" >> $GITHUB_ENV
          # Note don't use -Otarget for macOS, Homebrew's old make is too buggy
          echo "MAKEFLAGS=-j$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
      - name: Make
        run: |
          make

  build-nix:
    runs-on: ubuntu-22.04
    name: Build Nix
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache test fonts
        uses: actions/cache@v4
        with:
          path: |
            .fonts
            .sources
          key: fonts-${{ hashFiles('Makefile-fonts') }}
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v17
      - name: Cache Nix dependencies
        uses: DeterminateSystems/flakehub-cache-action@v1
      - name: Setup developer environment
        run: |
          nix develop --command ./bootstrap.sh
          nix develop --configure
          nix develop --command make
      - name: Run regression tests for which Ubuntu can't provide deps
        run: |
          nix develop --command make regressions TESTSRCS='tests/variations-axis.sil tests/feat-unicode-softhyphen.sil'
