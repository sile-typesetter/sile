\begin{document}
\chapter{Getting Started}

Now that we understand some of what SILE is about and what it seeks to do, let’s dive into SILE itself.

Before we show you how to use SILE, let’s have a quick look at an example SILE document.
This is the input that we’re going to feed to SILE, which it is going to process and turn into a PDF file.
Each of the examples can be saved as a text file and then use them as input to SILE.

\section{Selecting a text editor}

A SILE document is just a \em{plain text} file.
When you create your own SILE files, you will need to create them in a plain text editor.
Trying to create these files in a word processor such as Word will not work as they will be saved with the word processor’s formatting codes rather than as plain text.

Lots of good text editors exist (many of them for free) and any of them will work for SILE documents so which one you use is entirely a matter of preference.
You can get started with even the most basic text editors built into your desktop environment such as Notepad on Windows, TextEdit on macOS, Gedit on Gnome, Kate on KDE, etc.
However more advanced text editors (sometimes categorized as code editors) can offer a lot of features that make the editing process more robust.
Editors are typically either graphical (GUI) or terminal (TUI) oriented and range from relatively simple to extremely complex integrated development environments (IDE).
Examples of popular cross-platform GUI oriented editors include VS Code, Sublime Text, and Atom\footnote{Still relatively popular, but will be discontinued in October 2022.}.
Examples of popular terminal based editors include VIM\footnote{VIM & NeoVIM users can benefit from syntax highlighting and other features via the \code{vim-sile} plugin at \url{https://github.com/sile-typesetter/vim-sile}.}, Emacs, and GNU Nano.
Depending on your operating system there may be platform-specific editors to consider such as Notepad++ on Windows or TextMate on macOS.
Many more niche options abound: Lapce, Lite XL, Micro, Geany, BBEdit, UltraEdit, Eclipse, JetBrains IDE(s), Netbrains, Bluefish, CudaText, Leafpad, etc.

For comparisons of editors see \url{http://alternativeto.net/category/deevloper-tools/code-editor/} and select your platform.

\section{A Basic SILE Document}

Once you have an editor, it’s time to consider a SILE input file.
To begin with, here’s the most basic SILE file of all:

\begin{verbatim}
\line
\\begin\{document\}
Hello SILE!
\\end\{document\}
\line
\end{verbatim}

We’ll pick apart this document in the next chapter, but for now take it on
trust that this is what a SILE document looks like.

At the risk of belabouring the obvious, this is going to produce an A4-sized PDF
document, with the text \examplefont{Hello SILE} at the top left, and the page
number (1) centered at the bottom. How are we going to get to that PDF?

\section{Installing}

First of all, we need to get ahold of SILE and get it running on our computer.
Ready to use packages are available for macOS and many Linux distributions.
Details for those we know about are listed in the sections below.
Many other Linux distros without native packages can also take advantage of either Linuxbrew or Nix packaging.
For all other systems you will need to follow the steps to download and compile the source yourself.
Alternatively Docker containers are also available for use on any system that can run them.

\subsection{macOS}

For macOS the recommended way to install SILE is through the Homebrew package manager.
Once you have Homebrew running (see \url{http://brew.sh}), installing SILE is as easy as running:

\terminal{$ brew install sile}

The formula also has an option that can compile SILE from the current Git HEAD version.
To test the latest unreleased code you can install using:

\terminal{$ brew install sile --HEAD}

The \code{brew} package manager is also available as Linuxbrew for many Linux distributions.
As an alternative, the \code{nix} package manager is also available for macOS, see below.

\subsection{Arch Linux}

Arch Linux (and derivatives such as Manjaro, Parabola, and others) have prebuilt packages in the official package repository:

\terminal{$ pacman -S sile}

The official package builds use Lua 5.4.
Alternatively, a package that uses LuaJIT may be built manually from the Arch User Repository using \code{sile-luajit}.
See the note about LuaJIT in the section \em{Installing From Source} for applicable caveats.
A VCS package is also available as \code{sile-git} to build from the latest Git commit.
These may be built and installed like any other AUR\footnote{\url{https://wiki.archlinux.org/title/Arch_User_Repository}} package.

\subsection{Ubuntu}

A PPA\footnote{\url{https://launchpad.net/~sile-typesetter/+archive/ubuntu/sile}} is available for Ubuntu users with packages of SILE and all the necessary dependencies.
We introduced support starting with Bionic (18.04) and maintain packages for all Ubuntu release series since for as long as they are supported by Canonical.

\begin{terminal}
$ sudo add-apt-repository ppa:sile-typesetter/sile
$ sudo apt-get update
$ sudo apt-get install sile
\end{terminal}

\subsection{NetBSD}

For NetBSD, package sources are available in \code{print/sile}.
Use the usual command \code{bmake install} to build and install.
A binary package can be installed using \code{pkgin}

\begin{terminal}
$ pkgin install sile
\end{terminal}

\subsection{NixOS}

Nix packages are available in both the stable and unstable channels.
Because all packages are first made available in the unstable channel and then eventually make their way into the stable channel, to get the latest stable SILE releases we recommend hitting up the unstable channel first.
You can use all the usual Nix tricks including launching a new shell with the \code{sile} command available or running it directly from any shell:

\begin{terminal}
$ nix shell nixos-unstable#sile
$ sile <arguments>

$ nix run nixos-unstable#sile -- <arguments>
\end{terminal}

The SILE source repository is also a valid Nix Flake\footnote{\url{https://nixos.wiki/wiki/Flakes#Installing_flakes}} which means you can run any specific version or the latest unreleased development code directly:

\begin{terminal}
$ nix run github:sile-typesetter/sile/v0.30.0 -- <sile arguments>
$ nix run github:sile-typesetter/sile -- <sile arguments>
\end{terminal}

Besides of course its use in NixOS, the Nix package manager is also available on most Linux and BSD distributions, macOS, and even for Windows via WSL making it a viable alternative to run SILE on many platforms.

\subsection{Void Linux}

Void Linux packages are available in the default package manager.

\terminal{$ xbps-install sile}

\subsection{Running via Docker}

Another way of getting SILE up and running in a pre-compiled state is to use prebuilt Docker containers.
If your system has Docker installed already, you can run SILE simply by issuing a run command.
The first time it is used Docker will fetch the necessary layers and assemble the image for you.
Thereafter only a small amount of CPU time and memory overhead goes into running the container compared to a regular system install.

The catch is that because SILE is running \em{inside} the container, in order to do anything useful with it you must first pass your sources (including things like fonts) in and give it a way to write files back out.
The easiest way to do that is by mounting your entire project inside the container.
This makes the actual invocation command quite a mouthful.
For most shells, a single alias can be created to hide that complexity and make it pretty simple to run:

\begin{terminal}
$ alias sile='docker run -it --volume "$(pwd):/data" --user "$(id -u):$(id -g)" siletypesetter/sile:latest'
$ sile input.sil
\end{terminal}

Docker images are tagged to match releases (e.g. \code{v0.10.0}).
Additionally the latest release will be tagged \code{latest}, and a \code{master} tag is also available with the freshest development build.
You can substitute \code{latest} in the alias above to run a specific version.

One notable issue with using SILE from a Docker container is that by default it will not have access to your system’s fonts.
To work around this you can map a folder of fonts (in any organization usable by fontconfig) into the container.
This could be your system’s default font directory, your user one, a folder with project specific resources, or anything of your choosing.
You can see where fonts are found on your system using \code{fc-list}.
The path of your choosing from the host system should be mounted as a volume on \code{/fonts} inside the container like this:

\begin{terminal}
$ docker run -it --volume "/usr/share/fonts:/fonts" --volume "$(pwd):/data" --user "$(id -u):$(id -g)" siletypesetter/sile:latest
\end{terminal}

Armed with commands (or aliases) like these to take care of the actual invocation, you should be able to use all other aspects of SILE as documented in the rest of the manual.
Just be aware when it comes to things like fonts, images, or other resources about where your files are relative to the container.

\subsection{Installing From Source}

Downloads of SILE can be obtained from the home page at \silehp.

SILE requires a number of other software packages to be installed on the
computer before it can work—the Lua programming language, and the Harfbuzz text
shaping library. SILE provides its own PDF creation library, which has its own
requirements: \code{freetype}, \code{fontconfig}, \code{zlib} and
\code{libpng}.

We suggest you use your distributions’s package manager to install as many of the
dependencies as possible. On DEB-based Linux machines such as Debian and
Ubuntu, you should be able to install all of the needed dependencies by
issuing the command:

\terminal{$ apt-get install lua5.2 liblua5.2-dev lua-sec libharfbuzz-dev
libfreetype6-dev libfontconfig1-dev libpng-dev libicu-dev}

Here’s an incantation that will work on most Redhat-based Linux distros:

\terminal{$ yum install harfbuzz-devel make automake libtool gcc
freetype-devel fontconfig-devel lua-devel lua-sec libng-gevel libicu-devel}

If you are on another system you will have to come up with the correct equivalent
packages yourself.

There are a large number of lua dependencies required to run SILE. You may
either install them to your system using your system’s package manager or
\code{luarocks}, or let the SILE build process fetch and bundle them for you
(this is the default unless you specify otherwise). You cannot mix and match
these two methods; either the system path has to have all the dependencies, or
all of them will be bundled with SILE.

If you choose to install the lua dependencies to your system, you may use any
combination of your system’s packages and installing them via \code{luarocks
install}. The easiest way is to let Luarocks figure it out based on the
included Rockspec:

\terminal{$ luarocks install --deps-only sile-dev-1.rockspec}

Note that the \code{luasec} package requires OpenSSL libraries on your system
in order to compile. On some systems such as macOS you may need to configure
the location of the header files manually it install it:

\terminal{$ luarocks install luasec OPENSSL_DIR=...}

Once you have these requirements in place, you should then be able to unpack
the file that you downloaded from SILE’s home page, change to that directory,%
\footnote{If you downloaded a copy of the SILE source by cloning the git
repository rather than downloading one of the release packages, you will also
need to run \code{./bootstrap.sh} to setup the configure script at this point
before continuing to the next step.} and configure the build envirenment.

If you supplied all the Lua dependencies yourself, run:

\terminal{$ ./configure --with-system-luarocks}

Otherwise to go with default of bundling them, just run:

\terminal{$ ./configure}

\begin{note}
SILE can be built to run using LuaJIT under which it runs almost exactly twice
as fast! Because SILE lets your documents, classes, and packages use Lua code
from your system –and because the ecosystem for Lua software is more developed
around the regular Lua versions– we default to using the newest plain Lua
installation found. If your system has LuaJIT and you prefer to use it you can
ask the configure process to use it like this:

\terminal{$ ./configure --with-luajit}

Keep in mind that any Lua code you write will need to be JIT compatible. The
vast majority of Lua code will be fine, but there are a few limitations. See
the documentation for your version of LuaJIT for details.
\end{note}

If that comand was successful, you can build SILE itself:

\terminal{$ make}

Most users of SILE will want to install the \code{sile} command and SILE’s
library files onto their system; this can be done with:

\terminal{$ make install}

Now the \code{sile} command is available from any directory.

\begin{note}
If you wish you can skip the install step and use the compiled SILE executable diretly from the source directory.
As configured above this will only work from a shell with the CWD set to the SILE source.
To make it usable from anywhere, you can configure it with the source directory baked in as the installation location.

\begin{terminal}
$ ./configure --datarootdir=$(cd ..;pwd)
$ make
\end{terminal}

Now to run SILE from anywhere you just need to supply the full path to the source directory.

\terminal{$ /full/path/to/sile/sile}

\end{note}

\subsection{Notes for Windows users}

Nobody is currently maintaining Windows compatibility in SILE and we expect the state to be a bit broken.
At present there is no Windows installer.
Unless you are experienced building software on Windows it is probably best to use one of the Linux based methods under WSL (Windows Subsystem for Linux).

There are persistent rumors from credible users that say they have gotten it working, but the exact steps they used to make it happen are a bit elusive.
We would be happy to see better support, but none of the current developers are Windows users or developers.
If anywone wants to help in this department we'd be happy to facilitate contributions.

According to the rumors, SILE may be built on Windows using CMake and Visual Studio.
Additionally some Windows executables are supposed to be generated using Azure for every commit.
You may download these executables by selecting the latest build from \url{https://simoncozens-github.visualstudio.com/sile/_build} and downloading the “sile” artifact from the Artifacts drop down.

\section{Running SILE}

Let’s move to a new directory, and in a text editor, create the file
\code{hello.sil}. Copy in the content above and save the file. Now at your
command line run:

\terminal{$ sile hello.sil}

Once again, this should produce an output file \code{hello.pdf}.
Congratulations—you have just typeset your first document with SILE!

\note{SILE output filenames are generated by filing off the extension from
the first input filename and adding \code{.pdf}. If you want to write to
a different filename altogether, use the \code{-o file.pdf} command line
option to SILE. You can use \code{-o -} to write the PDF to standard output,
if you wish to use SILE as part of a pipeline.}

\section{Let’s Do Something Cool}

In \url{https://sile-typesetter.org/examples/docbook.xml}, you will find a typical DocBook 5.0
article. Normally turning DocBook to print involves a curious dance of XSLT
processors, format object processors and/or strange LaTeX packages. But SILE
can read XML files and it also comes with a \code{docbook} class, which tells
SILE how to render (admittedly, a subset of) the DocBook tags onto a page.

Turning \code{dockbook.xml} into \code{docbook.pdf} is now as simple as:

\begin{verbatim}
\line
$ ./sile -I docbook.sil docbook.xml
\sileversion
Loading docbook
<classes/docbook.sil><docbook.xml>[1] [2] [3]
\line
\end{verbatim}

The \code{-I} flag adds a \em{preamble}, which is to say that it loads up
a \em{class} before reading the input file; the \code{docbook} preamble
provides processing expectations for DocBook tags, which means that once this
is loaded, DocBook files can be processed directly as SILE documents.

In Chapter 9, we’ll look at how the \code{docbook} class works, and how you
can define processing expectations for other XML formats.

\section{Running SILE remotely as a CI job}

It may be useful for some work flows to run SILE remotely on a CI server as part of a job that renders documents automatically from sources.
This comes with the caveats mentioned in the section \em{Running via Docker} above, but if you plan ahead and arrange your projects right it can be quite useful.

There are actually many ways to run SILE remotely as part of a CI work flow.
Because packages are available for many platforms, one way would be to just use your platforms native package installation system to pull them into whatever CI runner environment you already use.
Another way is to pull in the prebuilt Docker container and run that.

As a case study, here is how a work flow could be setup in GitHub Actions:

\begin{verbatim}
\line
name: SILE
on: [ push, pull_request ]
jobs:
  sile:
    runs-on: ubuntu-latest
    name: SILE
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Render document with SILE
        uses: sile-typesetter/sile@v0
        with:
          args: my-document.sil
\line
\end{verbatim}

Add to your repository as \code{.github/workflows/sile.yaml}.
This work flow assumes your project has a source file \code{my-document.sil} and will leave behind a \code{my-document.pdf}.
Note that this Actions work flow explicitly uses a container fetched from Docker Hub because this is the fastest way to get rolling, and the comments in the section about Docker regarding tagged versions besides \code{latest} apply equally here.

Because this repository is itself a GitHub Action you can also use the standard \code{uses} syntax like this:

\begin{verbatim}
\line
        uses: sile-typesetter/sile@latest
\line
\end{verbatim}

But be warned that since GitHub rebuilds containers from scratch on every such invocation, this syntax is not recommended for regular use.
Pulling the prebuilt Docker images is recommended instead.

With these ideas in mind, other CI systems should be easy to support as well.
\end{document}
