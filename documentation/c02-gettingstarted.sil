\begin{document}
\chapter{Getting Started}

To begin harnessing the power of SILE, now that we have covered some of its key aspects and objectives, let’s dive into installing it on your computer, and set up everything you need to start typesetting documents.

\section{Installing SILE}

Ready-to-use packages are available for macOS and many Linux distributions.
Details for those we know about are listed in the sections below.
If your Linux distribution doesn’t have native packages, fear not!
You can also use either Linuxbrew or Nix packaging.

For other operating systems, you will need to download and compile the source code yourself, following the steps outlined below.
Alternatively, Docker containers are available for use on any compatible system.

\subsection{macOS}

For macOS users, the recommended method for installing SILE is through the Homebrew package manager.
Once Homebrew is up and running (see \href{http://brew.sh}), you can install SILE effortlessly by running:

\terminal{$ brew install sile}

Additionally, you have the option to compile SILE from the latest (unreleased) source code:

\terminal{$ brew install sile --HEAD}

The \code{brew} package manager is also available as Linuxbrew for many Linux distributions.
As an alternative, the \code{nix} package manager is also available for macOS; see below.

\subsection{Arch Linux}

Arch Linux (and derivatives such as Manjaro, Parabola, and others) have prebuilt packages in the official package repository:

\terminal{$ pacman -S sile}

A VCS package is also available as \code{sile-git} to build from the latest Git commit.
This may be built and installed like any other AUR\footnote{\href{https://wiki.archlinux.org/title/Arch_User_Repository}} package.

\subsection{Fedora}

A COPR repository\footnote{\href{https://copr.fedorainfracloud.org/coprs/jonny/SILE/}} is available for Fedora users with packages of SILE and all the necessary dependencies including fonts.
Fedora 36 and Fedora 37 are supported.
There is work in progress to get the packages added to the official Fedora repository.

\begin{terminal}
$ dnf copr enable jonny/SILE
$ dnf install sile
\end{terminal}

\subsection{OpenSUSE}

OpenSUSE has official packages ready to install the usual way:

\terminal{$ zypper install sile}

\subsection{Ubuntu}

A PPA\footnote{\href{https://launchpad.net/~sile-typesetter/+archive/ubuntu/sile}} is available for Ubuntu users with packages of SILE and all the necessary dependencies.
We introduced support starting with Bionic (18.04) and maintain packages for all Ubuntu release series since for as long as they are supported by Canonical.

\begin{terminal}
$ add-apt-repository ppa:sile-typesetter/sile
$ apt-get update
$ apt-get install sile
\end{terminal}

\subsection{NetBSD}

For NetBSD, package sources are available in \code{print/sile}.
Use the usual command \code{bmake install} to build and install.
A binary package can be installed using \code{pkgin}:

\begin{terminal}
$ pkgin install sile
\end{terminal}

\subsection{NixOS or under Nix on any platform}

In addition to NixOS, the \code{nix} package manager is available as a standalone package manager on many platforms including most Linux and BSD distributions, macOS, and even for Windows via WSL, and so presents an alternative way to run SILE on most systems.

The \code{sile} package is available in both the stable and unstable channels, the unstable channel having the latest stable SILE releases and the stable channel being frozen on NixOS releases.
You can use all the usual Nix tricks, including adding SILE into a \code{nix shell} environment or executing it directly with \code{nix run}.

\begin{terminal}
$ nix shell nixpkgs/nixpkgs-unstable#sile
$ sile <arguments>
$ nix run nixpkgs/nixpkgs-unstable#sile -- <arguments>
\end{terminal}

The SILE source repository is also a valid Nix Flake\footnote{\href{https://wiki.nixos.org/wiki/Flakes#Installing_flakes}} which means you can run any specific version or the latest unreleased development code directly:

\begin{terminal}
$ nix run github:sile-typesetter/sile/v0.15.0 -- <arguments>
$ nix run github:sile-typesetter/sile -- <arguments>
\end{terminal}

\subsection{Void Linux}

Void Linux packages are available in the default package manager.

\terminal{$ xbps-install sile}

\subsection{Running via Docker}

Another way of getting SILE up and running in a pre-compiled state is to use prebuilt Docker containers.
If your system has Docker installed already, you can run SILE simply by issuing a \code{run} command.
The first time it is used Docker will fetch the necessary layers and assemble the image for you.
Thereafter, only a small amount of CPU time and memory overhead goes into running the container compared to a regular system install.

The catch is that because SILE is running \em{inside} the container, in order to do anything useful with it you must first pass in your sources (including things like fonts) and give it a way to write files back out.
The easiest way to do that is by mounting your entire project inside the container.
This makes the actual invocation command quite a mouthful.
For most shells, a single alias can be created to hide that complexity and make it pretty simple to run:

\begin{terminal}
$ alias sile='docker run -it --volume "$(pwd):/data" siletypesetter/sile:latest'
$ sile input.sil
\end{terminal}

Docker images are tagged to match releases (e.g. \code{v0.15.0}).
Additionally the latest release will be tagged \code{latest}, and a \code{master} tag is also available with the freshest development build.
You can substitute \code{latest} in the alias above to run a specific version.

One notable issue with using SILE from a Docker container is that by default it will not have access to your system’s fonts.
To work around this you can map a folder of fonts (in any organization usable by fontconfig) into the container.
This could be your system’s default font directory, your user one, a folder with project specific resources, or anything of your choosing.
You can see where fonts are found on your system using \code{fc-list}.
The path of your choosing from the host system should be mounted as a volume on \code{/fonts} inside the container like this:

\begin{terminal}
$ docker run -it --volume "/usr/share/fonts:/fonts" --volume "$(pwd):/data" siletypesetter/sile:latest
\end{terminal}

Armed with commands (or aliases) like these to take care of the actual invocation, you should be able to use all other aspects of SILE as documented in the rest of the manual.
Just be aware when it comes to things like fonts, images, or other resources about where your files are relative to the container.

\subsection{Installing from source}

Downloads of SILE can be obtained from the home page at \silehp.

SILE is completely programmable using the Lua programming language.
As of v0.15.0, the CLI you actually execute is a Rust binary with a Lua VM built in.
(For compatibility and demonstration purposes a pure Lua version of the CLI is still available as \code{sile-lua}.)
The Rust binary can be built based on your system’s Lua sources or use its own vendored Lua sources.
All SILE’s Lua code takes a lowest-common-denominator approach to Lua compatibility.
Any of Lua 5.1, 5.2, 5.3, 5.4, or LuaJIT (2.0, 2.1, or OpenResty) are fully supported.
Compiling it to match your system’s Lua version has the advantage of making it easy to access system installed Lua Rocks, but this is not a requirement.

Compiling from sources will require both a Rust toolchain and Lua sources.
At runtime no Rust tooling is required, and the system Lua interpreter is not actually used.

It also relies on external libraries to access fonts and write PDF files.
HarfBuzz (minimum version 2.7.4) should be available from your operating system’s package manager.
For HarfBuzz to work you will also need \code{fontconfig} installed.
SILE also requires the \code{icu} libraries for Unicode handling.
SILE provides its own PDF creation library, which has its own requirements: \code{fontconfig}, \code{zlib} and \code{libpng}.

Even if building SILE from source, we suggest you use your distributions’s package manager to install as many of the dependencies as possible.
Most distros will have all of the system library dependencies and some of them will also have packages for some or all of the Lua dependencies.
The \code{./configure} script will prompt for any dependencies that are missing, but it well only suggest the generic names of tools and libraries you will need.
You will need to search the package repositories for the correct package names.
Note that many distributions separate "development" or "library" packages from main ones.
For example if your distro has "icu" and "libicu-dev" — for the purpose of building SILE you’ll need the latter;
  Once you have built it, it will only need the former to run.

There are a large number of Lua dependencies required to run SILE.
You may either install them to your system using your system’s package manager or \code{luarocks}, or let the SILE build process fetch and bundle them for you.
(This is the default unless you specify otherwise.)
You cannot mix and match these two methods;
    either the system path has to have all the dependencies, or all of them will be bundled with SILE.

If you choose to install the Lua dependencies to your system, you may use any combination of your system’s packages and installing them via \code{luarocks install}.
The easiest way is to let Luarocks figure it out based on the included Rockspec file:

\terminal{$ luarocks install --only-deps sile-dev-1.rockspec}

Note that the \code{luasec} package requires OpenSSL libraries on your system in order to compile.
On some systems such as macOS you may need to configure the location of the header files manually to install it:

\terminal{$ luarocks install luasec OPENSSL_DIR=...}

Once you have these requirements in place, you should then be able to unpack the file that you downloaded from SILE’s home page, change to that directory,%
\footnote{If you downloaded a copy of the SILE source by cloning the git repository rather than downloading one of the release packages, you will also need to run \code{./bootstrap.sh} to setup the configure script at this point before continuing to the next step.}
    and configure the build environment.

If you supplied all the Lua dependencies yourself, run:

\terminal{$ ./configure --with-system-luarocks}

Otherwise to go with default of bundling them, just run:

\terminal{$ ./configure}

Also note that by default, the build process will use a vendored copy of fresh Lua sources.
This will probably result in a different version of Lua than the default on your system.
In the event you want it to exactly match, you'll need to have the development headers installed matching your system Lua.
Once available, add this flag to your configuration:

\terminal{$ ./configure --with-system-lua-sources}

\begin{autodoc:note}
Normally a source build will not actually \em{run} until after it is installed.
If you want to be able to run it from the source directory without installing it, it is important to configure it for that ahead of time.
Setting up the run-time paths such that the source directory are checked allows SILE to run in place after building without installing.
This is useful if you want to experiment with running SILE \strong{and/or} plan on modifying or developing SILE itself.
Being able to tweak the sources and re-run SILE immediately to check the difference is much faster than having to install after each tweak.
You can add \code{--datarootdir=$(cd ..;pwd)} which will enable the compiled binary to run directly from the source directory.

Alternatively another useful option is \code{--enable-developer-mode}.
This will also accomplish the path handling change (so you don’t have to use both) but takes it a few steps farther.
It also enables checks on extra dependencies needed for \code{testing} SILE.
These can be useful whether just to hack on it for your own use or contribute upstream, but also not all of the tooling is required.
For example (among other things) you may not wish to rebuild the Docker image, lint the Lua files, or test the Flake.
Individual checks can be skipped: \code{--enable-developer-mode NIX=false DOCKER=false LUACHECK=false}.
Using this the developer mode option also enables a number of targets that wouldn’t normally be needed by end-users, such as \code{make regressions}.
\end{autodoc:note}

\begin{autodoc:note}
By default SILE looks for a LuaJIT installation at configure time.
This default is because running it under LuaJIT is nearly twice as fast as under PUC Lua versions.
That being said, all SILE’s Lua code takes a lowest-common-denominator approach to Lua compatibility.
Any of Lua 5.1, 5.2, 5.3, 5.4, or LuaJIT (2.0, 2.1, or OpenResty) are fully supported.

If your system either does not have LuaJIT or you prefer to use a version of PUC lua, you can ask the configure process to pass on the LuaJIT detection:

\terminal{$ ./configure --without-luajit}

Keep in mind that while SILE and all its dependencies are tested to work on any interpreter, any Lua code \em{you write} for your project will need to be compatible with whatever version you choose.
Several shims are provided to keeps things compatible, but it is also possible to write Lua expressions that only work in some VMs.
The vast majority of Lua code will be fine, but there are a few limitations.
\end{autodoc:note}

If that command was successful, you can now build SILE itself:

\terminal{$ make}

Most users of SILE will want to install the \code{sile} command and SILE’s library files onto their system.
This can be done with:

\terminal{$ make install}

Now the \code{sile} command will be available from any directory.

\begin{autodoc:note}
If you wish you, can skip the install step and use the compiled SILE executable directly from the source directory.
As configured above, this will only work from a shell with the CWD set to the SILE source.
To make it usable from anywhere, you can configure it with the source directory baked in as the installation location.

\begin{terminal}
$ ./configure --datarootdir=$(cd ..;pwd)
$ make
\end{terminal}

Now to run SILE from anywhere you just need to supply the full path to the source directory.

\terminal{$ /full/path/to/sile/sile}

\end{autodoc:note}

\subsection{Notes for Windows users}

Nobody is currently maintaining Windows compatibility in SILE and we expect the state to be a bit broken.
At present there is no Windows installer.
Unless you are experienced building software on Windows, it is probably best to use one of the Linux-based methods under WSL (Windows Subsystem for Linux).

There are persistent rumors from credible users that say they have gotten it working, but the exact steps they used to make it happen are a bit elusive.
We would be happy to see better support, but none of the current developers are Windows users or developers.
If anyone wants to help in this department, we’d be happy to facilitate contributions.

According to the rumors, SILE may be built on Windows using CMake and Visual Studio.
Additionally some Windows executables are supposed to be generated using Azure for every commit.
You may download these executables by selecting the latest build from \href{https://simoncozens-github.visualstudio.com/sile/_build} and downloading the “sile” artifact from the Artifacts drop down.

\section{Selecting a text editor}

A SILE document is just a \em{plain text} file.
When you create your own SILE files, you will need to create them in a plain text editor.
Trying to create these files in a word processor such as Word will not work, as they will be saved with the word processor’s formatting codes rather than as plain text.

Lots of good text editors exist (many of them for free) and any of them will work for SILE documents so which one you use is entirely a matter of preference.
You can get started with even the most basic text editors built into your desktop environment such as Notepad on Windows, \nohyphenation{TextEdit} on macOS, \nohyphenation{Gedit} on Gnome, Kate on KDE, etc.
However more advanced text editors (sometimes categorized as \em{code editors}) can offer a lot of features that make the editing process more robust.
Editors are typically either graphical (GUI) or terminal (TUI) oriented and range from relatively simple to extremely complex integrated development environments (IDE).
Examples of popular cross-platform GUI oriented editors include VS Code, Sublime Text, and Atom\footnote{Still relatively popular, but was discontinued in late 2022.}.
Examples of popular terminal based editors include VIM\footnote{VIM & NeoVIM users can benefit from syntax highlighting and other features via the \code{vim-sile} plugin at \href{https://github.com/sile-typesetter/vim-sile}.}, Emacs, and GNU Nano.
Depending on your operating system there may be platform-specific editors to consider such as Notepad++ on Windows or TextMate on macOS.
Many more niche options abound: Lapce, Lite XL, Micro, Geany, BBEdit, UltraEdit, Eclipse, JetBrains IDE(s), Netbrains, Bluefish, CudaText, Leafpad, etc.

For comparisons of editors see \href{https://alternativeto.net/category/developer-tools/code-editor/} and select your platform.

\section{Running SILE}

Once you have set up an editor, it’s time to consider a SILE input file.

\subsection{A basic document}

Let’s move to a new directory, and in a text editor, create a file \code{hello.sil}.
Copy in the following content and save the file.

\begin[type=autodoc:codeblock]{raw}
\begin{document}
Hello SILE!
\end{document}
\end{raw}

It is a the most basic document file of all, in “TeX-like” SIL syntax (more on that later).

Then, at your command line type:

\terminal{$ sile hello.sil}

This produces an A4-sized PDF document \code{hello.pdf}, with the text \autodoc:example{Hello SILE} at the top left, and the page number (1) centered at the bottom.

Congratulations—you have just typeset your first document with SILE!

All the available command-line options are documented both in the help output (\code{sile --help}) and in the man page (\code{man sile}).
This manual will only mention a few in passing as they come up in other other topics.

\begin{autodoc:note}
SILE generates output filenames by replacing the extension from the first input filename with the default extension for the outputter.
For most outputters this will be \code{.pdf} but, for example, the text backend will append \code{.txt} instead.
If you want to write to a different filename altogether, use the \code{--output file.pdf} command line option.
You can use \code{--output -} to write the output directly to the system IO stream—useful if you wish to use SILE as part of a pipeline.
\end{autodoc:note}

\subsection{Let’s do something cool}

In \href{https://sile-typesetter.org/examples/docbook.xml}, you will find a typical DocBook 5.0 article.
Normally turning DocBook to print involves a complicated dance of XSLT processors, format object processors, and/or strange LaTeX packages.
But SILE can read XML files directly, and comes with a \autodoc:class{docbook} class, which tells SILE how to render (admittedly, a subset of) the DocBook tags onto a page.

Hence, turning \code{docbook.xml} into \code{docbook.pdf} is as simple as:

\begin{terminal}
$ sile --class docbook docbook.xml
\sileversion
Loading docbook
<classes/docbook.sil><docbook.xml>[1] [2] [3]
\end{terminal}

The \code{-c} flag sets the default class, a necessary step because DocBook XML files do not come wrapped in a tag that specifies a SILE class.
The \autodoc:class{docbook} class will provide the commands necessary to process the tags typically found in DocBook files.

In Chapter 9, we’ll look at how the \autodoc:class{docbook} class works, and how you can define processing expectations for other XML formats.

\subsection{Running SILE remotely as a CI job}

It may be useful for some work flows to run SILE remotely on a CI server as part of a job that renders documents automatically from sources.
This comes with the caveats mentioned in the section \em{Running via Docker} above, but if you plan ahead and arrange your projects properly it can be quite useful.

There are actually many ways to run SILE remotely as part of a CI work flow.
Because packages are available for many platforms, one way would be to just use your platform’s native package installation system to pull them into whatever CI-runner environment you already use.
Another way is to pull in the prebuilt Docker container and run that.

As a case study, here is how a workflow could be setup in GitHub Actions:

\begin[type=autodoc:codeblock]{raw}
name: SILE
on: [ push, pull_request ]
jobs:
  sile:
    runs-on: ubuntu-latest
    name: SILE
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Render document with SILE
        uses: sile-typesetter/sile@v0
        with:
          args: my-document.sil
\end{raw}

Add the block above to your repository as \code{.github/workflows/sile.yaml}.
This workflow assumes your project has a source file named \code{my-document.sil} and will leave behind a PDF file named \code{my-document.pdf}.
Note that this Actions workflow explicitly uses a container fetched from Docker Hub because this is the fastest way to get rolling. The comments in the section about Docker regarding tagged versions besides \code{latest} apply equally here.

Because this repository is itself a GitHub Action you can also use the standard \code{uses} syntax like this:

\begin[type=autodoc:codeblock]{raw}
        uses: sile-typesetter/sile@latest
\end{raw}

However, since GitHub rebuilds containers from scratch on every such invocation, this syntax is not recommended for regular use.
Pulling the prebuilt Docker images is recommended instead.

With these ideas in mind, other CI systems should be easy to support as well.

\section{Installing third-party packages}

Third-party SILE packages can be installed using the \code{luarocks} package manager.
Packages may be hosted anywhere, either on the default \href{https://luarocks.org} repository or (as in the example below) listed in a specific server manifest.
For example, to install markdown.sile\footnote{\href{https://github.com/Omikhleia/markdown.sile}} (a plugin that provides a SILE inputter that reads and processes Markdown documents) one could run:

\begin{terminal}
$ luarocks install --server=https://luarocks.org/dev markdown.sile
\end{terminal}

By default, this will try to install the package to your system.
This may not be desired (and usually requires root access), but there are two other ways to install plugins.
First you make add \code{--tree ./} to install them in the current directory.
In this case, assuming this is the same directory as your document, SILE will automatically find such plugins.
Additionally you may install them to your user profile by adding \code{--local} when installing.
In this case you will also need to modify your user environment to check for plugins in that path since Lua does not do so by default.
This can be done by running \code{eval $(luarocks path)} before running SILE (or from your shell’s initialization script).

\subsection{Finding Lua version in use for running SILE}

Third party packages must be installed for the same version of Lua that SILE uses.
On systems with more than one Lua version installed, \em{and} where SILE does not use the default one, you may need to specify the version manually.
To determine which Lua version is used for the execution of SILE:

\begin{terminal}
$ export LUA_VERSION=$(sile -e 'print(SILE.lua_version);os.exit()' 2> /dev/null)
$ luarocks install --lua-version $LUA_VERSION ...
\end{terminal}
\end{document}
