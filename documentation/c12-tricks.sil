\begin{document}
\chapter{Further Tricks}

We’ll conclude our tour of SILE by looking at some tricky situations which require further programming.

\section{Parallel Text}

The example \url{https://sile-typesetter.org/examples/parallel.sil}
contains a rendering of chapter 1 of Matthew’s Gospel in English and Greek.
It uses the \code{diglot} class to align the two texts side-by-side.
\code{diglot} provides the \code{\\left} and \code{\\right}
commands to start entering text on the left column or the right column respectively,
and the \code{\\sync} command to ensure that the two columns are in sync with each other.
It’s an instructive example of what can be done in a SILE class, so we will take it apart and see how it works.

The key thing to note is that the SILE typesetter is an object (in the object-oriented programming sense).
Normally, it’s a singleton object—i.e. one typesetter is used for typesetting everything in a document.
But there’s no reason why we can’t have more than one.
In fact, for typesetting parallel texts, the simplest way to do things is to have two typesetters,
one for each column, and have them communicate with each other at various points in the operation.

Let’s begin \code{diglot.lua} as usual by setting up the class and declaring our frames:

\begin{verbatim}
\line
local plain = require("classes.plain");
local diglot = pl.class(plain)
diglot._name = "diglot"

function diglot:_init (options)
  plain._init(self, options)
  self:loadPackage("counters")
    SILE.scratch.counters.folio = \{ value = 1, display = "arabic" \};
    diglot:declareFrame("a",    \{left = "8.3\%pw", right = "48\%pw",
                top = "11.6\%ph", bottom = "80\%ph" \});
    diglot:declareFrame("b",    \{left = "52\%pw",  right = "100\% - left(a)",
                top = "top(a)", bottom = "bottom(a)" \});
    diglot:declareFrame("folio",\{left = "left(a)", right = "right(b)",
                top = "bottom(a)+3\%ph",bottom = "bottom(a)+8\%ph" \});
  return self
end
\end{verbatim}

Now we create two new typesetters, one for each column, and we tell each one how to find the other:

\begin{verbatim}
diglot.leftTypesetter = SILE.defaultTypesetter \{\}
diglot.rightTypesetter = SILE.defaultTypesetter \{\}
diglot.rightTypesetter.other = diglot.leftTypesetter
diglot.leftTypesetter.other = diglot.rightTypesetter
\end{verbatim}

Each column needs its own font, so we provide commands to store this information.
The \code{\\leftfont} and \code{\\rightfont} macros simply store their options
to be passed to the \code{\\font} command every time \code{\\left} and \code{\\right} are called.
(Because the fonts are controlled by global settings rather than being typesetter-specific.)

\begin{verbatim}
SILE.registerCommand("leftfont", function(options, content)
  SILE.scratch.diglot.leftfont = options
end, "Set the font for the left side")

SILE.registerCommand("rightfont", function(options, content)
  SILE.scratch.diglot.rightfont = options
end, "Set the font for the right side")
\end{verbatim}

Next come the commands for sending text to the appropriate typesetter.
The current typesetter object used by the system is stored in the variable \code{SILE.typesetter};
many commands and packages call methods on this variable,
so we need to ensure that this is set to the typesetter object that we want to use.
We also want to turn off paragraph detection,
as we will be handling the paragraphing manually using the \code{\\sync} command:

\begin{verbatim}
SILE.registerCommand("left", function(options, content)
  SILE.settings:set("typesetter.parseppattern", -1)
  SILE.typesetter = diglot.leftTypesetter;
  SILE.call("font", SILE.scratch.diglot.leftfont, \{\})
end, "Begin entering text on the left side")

SILE.registerCommand("right", function(options, content)
  SILE.settings:set("typesetter.parseppattern", -1)
  SILE.typesetter = diglot.rightTypesetter;
  SILE.call("font", SILE.scratch.diglot.rightfont, \{\})
end, "Begin entering text on the right side")
\end{verbatim}

The meat of the \code{diglot} package comes in the \code{sync} command,
which ensures that the two typesetters are aligned.
Every time we call \code{sync}, we want to ensure that they are both at the same position on the page.
In other words, if the left typesetter has gone further down the page than the right one,
we need to insert some blank space onto the right typesetter’s output queue to get them back in sync,
and vice versa.

SILE’s page builder has a method called \code{SILE.pagebuilder:collateVboxes} which bundles a bunch of vertical boxes into one;
we can use this to bundle up each typesetter’s output queue and measure the height of the combined vbox.
(Of course it’s possible to sum the heights of each box on the output queue by hand,
but this achieves the same goal a bit more cleanly.)

\begin{verbatim}
SILE.registerCommand("sync", function()
  local lVbox = SILE.pagebuilder:collateVboxes(diglot.leftTypesetter.state.outputQueue)
  local rVbox = SILE.pagebuilder:collateVboxes(diglot.rightTypesetter.state.outputQueue)
  if (rVbox.height > lVbox.height) then
    diglot.leftTypesetter:pushVglue(\{ height = rVbox.height - lVbox.height \})
  elseif (rVbox.height < lVbox.height) then
    diglot.rightTypesetter:pushVglue(\{ height = lVbox.height - rVbox.height \})
  end
\end{verbatim}

Next we end each paragraph (we do this after adding the glue so that \code{parskips}
do not get in the way), and go back to handling paragraphing as normal:

\begin{verbatim}
  diglot.rightTypesetter:leaveHmode();
  diglot.leftTypesetter:leaveHmode();
  SILE.settings:set("typesetter.parseppattern", "\\n\\n+")
end)
\end{verbatim}

Now everything is ready apart from the output routine. In the output routine
we need to ensure, at the start of each document and the start of each page,
that each typesetter is linked to the appropriate frame:

\begin{verbatim}
function diglot:_init (options)
  self.leftTypesetter:init(SILE.getFrame("a"))
  self.rightTypesetter:init(SILE.getFrame("b"))
  return plain.init(self)
end
\end{verbatim}

\noindent{}(\code{SILE.getFrame} retrieves a frame that we have declared.)

The default \code{newPage} routine will do this for one typesetter every
time we open a new page, but it doesn’t know that we have another typesetter
object to set up as well; so we need to
to make sure that, no matter which typesetter causes an new-page
event, the other typesetter also gets correctly initialised:

\begin{verbatim}
diglot.newPage = function(self)
  plain.newPage(self)
  if SILE.typesetter == diglot.leftTypesetter then
    SILE.typesetter.other:initFrame(SILE.getFrame("b"))
    return SILE.getFrame("a")
  else
    SILE.typesetter.other:initFrame(SILE.getFrame("a"))
    return SILE.getFrame("b")
  end
end
\end{verbatim}

And finally, when one typesetter causes an end-of-page event, we need to ensure
that the other typesetter is given the opportunity to output its queue to the
page as well:

\begin{verbatim}
diglot.endPage = function(self)
  SILE.typesetter.other:leaveHmode(1)
  plain.endPage(self)
end
\end{verbatim}

Similarly for the end of the document, but in this case we will use the
emergency \code{chuck} method; whereas \code{leaveHmode} means “call the
page builder and see there’s enough material to build a page”, \code{chuck}
means “you must get rid of everything on your queue now.” We add some infinitely
tall glue to the other typesetter’s queue to help the process along:

\begin{verbatim}
diglot.finish = function(self)
  table.insert(SILE.typesetter.other.state.outputQueue, SILE.nodefactory.vfillglue())
  SILE.typesetter.other:chuck()
  plain.finish(self)
end
\end{verbatim}

And there you have it; a class which produces balanced parallel texts using two
typesetters at once.

\section{Sidenotes}

One SILE project needed two different kinds of sidenotes, margin notes and gutter
notes.

\line
\img[src=documentation/discovery.png,width=width(content)]
\line

Sidenotes can be seen as a simplified form of
parallel text. With a true parallel, neither the left or the right typesetter
is “in charge”—either can fill up the page and then inform the other typesetter
that they need to catch up. In the case of sidenotes, there’s a well-defined
main flow of text, with annotations having to work around the pagination of the
typeblock.

There are a variety of ways that we could implement these sidenotes; as it
happened, I chose a different strategy for the margin notes and the gutter notes.
Cross-references in the gutter could appear fairly frequently, and so needed to
“stack up” down the page—they need to be \em{at least} on a level with the verse
that they relate to, but could end up further down the page if there are a few
cross-references close to each other. Markings in the margin, on the other hand,
were guaranteed not to overlap.

We’ll look at the margin marking first. We’ll implement this as a special
zero-width hbox (what TeX would call a \code{\\special}) which, although it lives in the output stream of the main
typeblock, actually outputs itself by marking the margin at the current vertical
position in the typeblock. In the example above, there will be a special hbox
just before the word “there” in the first line.

First we need to find the appropriate margin frame and, find its left boundary:

\begin{verbatim}
\line
discovery.typesetProphecy = function(symbol)
  local margin = discovery:oddPage() and
                  SILE.getFrame("rMargin") or SILE.getFrame("lMargin")
  local target = margin:left()
\end{verbatim}

Next, we call another command to produce the symbol itself; this allows the
book designer to change the symbols at the SILE level rather than having to
mess about with the Lua file. We use the \command{\\hbox} command to wrap the
output of the command into a hbox. \command{\\hbox} returns its output, but also
puts the box into the typesetter’s output node queue; we don’t want it to appear
in the main typeblock, so we remove the node again, leaving our private copy
in the \code{hbox} variable.

\begin{verbatim}
  local hbox = SILE.call("hbox",\{\}, function()
    SILE.call("prophecy-"..symbol.."-mark")
  end)
  table.remove(SILE.typesetter.state.nodes)
\end{verbatim}

What we \em{do} want in the output queue is our special hbox node which will
put the marking into the margin. This special hbox has no impact on the
current line—it has no width, height, or depth—and it contains a copy of the
symbol that we stored in the \code{hbox} variable.

\begin{verbatim}
  SILE.typesetter:pushHbox(\{
    width= 0,
    height = 0,
    depth= 0,
    value= hbox,
\end{verbatim}

Finally we need to write the routine which outputs this hbox. Box
output routines receive three parameters: the box itself, the current
typesetter (which knows the frame it is typesetting into, and the frame
knows whereabouts it has got to), and a variable representing the stretchability
or shrinkability of the line. (We don’t need that for this example.)

What our output routine should do is: save a copy of our horizontal position,
so that we can restore it later as we carry on outputting other boxes; jump
across to the left edge of the margin, which we computed previously; tell
the symbol that we’re carrying with us to output \em{itself}; and then jump
back to where we were:

\begin{verbatim}
    outputYourself= function (self, typesetter, line)
      local saveX = typesetter.frame.state.cursorX;
      typesetter.frame.state.cursorX = target
      self.value:outputYourself(typesetter,line)
      typesetter.frame.state.cursorX = saveX
    end
  \})
\line
\end{verbatim}

This was a quick-and-dirty version of sidenotes (in twenty lines of code!)
which works reasonably well
for individual symbols which are guaranteed not to overlap. For the gutter notes,
which are closer to true sidenotes, we need to do something a bit more intelligent.
We’ll take a similar approach to when we made the parallel texts, by employing a
separate typesetter object.

As before we’ll create the object, and ensure that at the start of the document
and at the start of each page it is populated correctly with the appropriate frame:

\begin{verbatim}
\line
discovery.innerTypesetter = SILE.defaultTypesetter \{\}

discovery.init = function()
  local gutter = discovery:oddPage() and
                 SILE.getFrame("rGutter") or SILE.getFrame("lGutter")
  discovery.innerTypesetter:init(gutter)
  ...
  return SILE.classes.base:init()
end

discovery.newPage = function ()
  ...
  discovery.innerTypesetter:leaveHmode(1)
  local gutter = discovery:oddPage() and
                 SILE.getFrame("rGutter") or SILE.getFrame("lGutter")
  discovery.innerTypesetter:init(gutter)
  ...
  return SILE.classes.base.newPage(discovery);
end
\line
\end{verbatim}

Now for the function which actually handles a cross-reference. As with the
parallels example, we start by totting up the height of the material processed
on the current page by both the main typesetter and the cross-reference typesetter.

\begin{verbatim}
\line
discovery.typesetCrossReference = function(xref)
  discovery.innerTypesetter:leaveHmode(1)
  local innerVbox = SILE.pagebuilder:collateVboxes(discovery.innerTypesetter.state.outputQueue)
  local mainVbox = SILE.pagebuilder:collateVboxes(SILE.typesetter.state.outputQueue)
\end{verbatim}

This deals with the material which has already been put into the output queue: in
other words, completed paragraphs. The problem here is that we do not want to
end a paragraph between two verses; if we are mid-paragraph while typesetting
a cross-reference, we need to work out what the height of the material \em{would have
been} if we were to put it onto the output queue at this point. So, we take
the \code{SILE.typesetter} object on a little excursion.

First we take a copy of the current node queue, and then we call the typesetter’s
\code{pushState} method. This initializes the typesetter anew, while saving
its existing state for later. Since we have a new typesetter, its node queue
is empty, and so we feed it the nodes that represent our paragraph so far. Then
we tell the typesetter to leave horizontal mode, which will cause it to go away
and calculate line breaks, leading, paragraph height and so on. We box up its
output queue, and then return to where we were before. Now we have a box which
represents what would happen if we set the current paragraph up to the point
that our cross-reference is inserted; the height of this box is the distance
we need to add to \code{mainVbox} to get the vertical position of the cross-reference
mark.

\begin{verbatim}
  local unprocessedNodes = pl.tablex.deepcopy(SILE.typesetter.state.nodes)
  SILE.typesetter:pushState()
  SILE.typesetter.state.nodes = unprocessedNodes
  SILE.typesetter:leaveHmode(1)
  local subsidiary = SILE.pagebuilder:collateVboxes(SILE.typesetter.state.outputQueue)
  SILE.typesetter:popState()
  mainVbox.height = mainVbox.height + subsidiary.height
\end{verbatim}

\note{The \code{1} argument to \code{leaveHmode} means “you may not create
a new page here.”}

In most cases, the cross-reference typesetter hasn’t got as far down the page
as the body text typesetter, so we tell the cross-reference typesetter to shift itself
down the page by the difference. Unlike the parallel example, where either typesetter
could tell the other to open up additional vertical space, in this case it’s OK if
the cross-reference appears a bit lower than the verse it refers to.

\begin{verbatim}
  if (innerVbox.height < mainVbox.height) then
    discovery.innerTypesetter:pushVglue(\{ height = mainVbox.height - innerVbox.height \})
  end
\end{verbatim}

At this point the two typesetters are now either aligned, or the cross-reference
typesetter has gone further down the page than the verse it refers to. Now we
can output the cross-reference itself.

\begin{verbatim}
  SILE.settings:temporarily(function()
    SILE.settings:set("document.baselineskip", SILE.nodefactory.vglue("7pt"))
    SILE.call("font", \{size = "6pt", family="Helvetica", weight="800"\}, \{\})
    discovery.innerTypesetter:typeset(SILE.scratch.chapter..":"..SILE.scratch.verse.." ")
    SILE.call("font", \{size = "6pt", family="Helvetica", weight="200"\}, \{\})
    discovery.innerTypesetter:typeset(xref)
    discovery.innerTypesetter:leaveHmode()
    discovery.innerTypesetter:pushVglue(\{ height = SILE.length(\{length = 4\}) \})
  end)
end
\line
\end{verbatim}

\note{We haven’t used \code{SILE.call} here because it performs all its operations
on the default typesetter. If we wanted to make things cleaner, we could swap
typesetters by assigning \code{discovery.innerTypesetter} to \code{SILE.typesetter}
and then calling ordinary commands, rather than doing the settings and glue
insertion “by hand.”}

In the future it may make sense for there to be a standard \code{sidenotes}
package in SILE, but it has been instructive to see a couple of ‘non-standard’
examples to understand how the internals of SILE can be leveraged to create such a
package. Your homework is to create one!

\section{SILE As A Library}

So far we’ve been assuming that you would want to run SILE as a processor for
an existing document. But what if you have a program which produces or munges
data, and you would like to produce PDFs from within your application?
In that case, it may be easier and provide more flexibility to use SILE as a library.

At \url{https://sile-typesetter.org/examples/byhand.lua}, you will find an
example of a Lua script which produces a PDF from SILE. It’s actually fairly
simple to use SILE from within Lua; the difficult part is setting things up.
Here’s how to do it.

\begin{verbatim}
\line
require("core.sile")
SILE.outputFilename = "byhand.pdf"
local plain = require("plain", "classes")
SILE.documentState.documentClass = plain;
local firstFrame = plain:init()
SILE.typesetter:init(firstFrame)
\line
\end{verbatim}

Loading the SILE core library also loads up all the other parts of SILE. We
need to set the output file name and load the class that we want to use to
typeset the document with.  We then need to tell SILE what class we are
actually using, call \code{init} on the class to get the first frame for
typesetting, and then initialize the typesetter with this frame. This is all
that SILE does to get itself ready to typeset.

After this, all the usual API calls will work: \code{SILE.call},
\code{SILE.typesetter:typeset} and so on.

\begin{verbatim}
SILE.typesetter:typeset(data)
\end{verbatim}

The only thing to be careful of is the need to call the \code{finish} method
on your document class at the end of processing to finish off the final page:

\begin{verbatim}
plain:finish()
\line
\end{verbatim}

\section{Debugging}

When you are experimenting with SILE and its API, you may find it necessary to get further information about what SILE is up to.
SILE has a variety of debugging switches that can be turned on by the command line or by Lua code.

Running SILE with the \code{--debug \em{facility}} switch will turn on debugging for a particular area or areas of SILE’s operation:

% Scan code for currently used flags:
% rg -I '.*SU.debug(ging)?\("(\w+)".*' -r '$2' | =sort -u

\begin{itemize}
\item{\code{ast} provides information about how SILE parsed the document into
      an abstract syntax tree.}
\item{\code{break} provides (copious) information about the line breaking
      algorithm.}
\item{\code{fonts} shows what font families and attributes were attempted
      and what font files were used to supply them.}
\item{\code{frames} draws red boxes around the frames on the page.}
\item{\code{hboxes} draws red boxes around all the hboxes on the page.}
\item{\code{pagebuilder} helps to debug problems when determining page breaks.}
\item{\code{macros} notes when new functions are defined from TeXlike macro
      syntax.}
\item{\code{makedeps} lists resources that were determined to be dependencies
      (use with \code{-m}).}
\item{\code{profile} turns on Lua profiling, which gives a report on where the
      Lua interpreter is spending its time while processing your document.
      It also makes SILE go really, really slow.}
\item{\code{pushback} notes how already-shaped content that didn’t fit in
      frames is processed as it migrates to following ones.}
\item{\code{tokenizer} shows how input content gets broken up into segments
      before shaping.}
\item{\code{typesetter} provides general debugging for the typesetter:
      turning characters into boxes, boxes into lines, lines into paragraphs,
      and paragraphs into pages.}
\item{\code{vboxes} provides even more information about page break decisions,
      showing you what vboxes were in SILE’s queue when considering the breaking.}
\item{\code{versions} gives a report on the versions of libraries and fonts in use;
      please include this information when reporting bugs in SILE!}
\item{Any package or other area of SILE’s operation may define their own debugging tags;
      the \code{insertions} package does this, as do the Japanese and Uyghur language
      support systems (\code{--debug uyghur}).
      Often the debug flag is the name of the package or the function.}
\end{itemize}

Multiple facilities can be turned on by adding the flag multiple times or by separating them with commas:
\code{--debug typesetter,break} will turn on debugging information for the typesetter and line breaker.

From Lua, you can add entries to the \code{SILE.debugFlags} table to turn on debugging for a given facility.
This can be useful for temporarily debugging a particular operation:

\begin{verbatim}
\line
SILE.debugFlags.typesetter = true
SILE.typesetter:leaveHmode()
SILE.debugFlags.typesetter = false
\line
\end{verbatim}

From a package’s point of view, you can write debugging information by calling the \code{SU.debug} function
(\code{SU} stands for SILE Utilities, and contains a variety of auxiliary functions used throughout SILE):

\begin{verbatim}
\line
SU.debug("mypackage", "Doing a thing")
\line
\end{verbatim}

When an error occurs, for example when writing custom scripts,
its traceback (\em{stack trace}) can be printed via the \code{--trace}, or \code{-t} switch:

\begin{verbatim}
\line
$ sile -t broken.sil
\sileversion
<broken.sil>

Error detected:
packages/inline-footnotes.lua:9: attempt to call a nil value (global 'thisPageInsertionBoxForClass')
stack traceback:
  packages/inline-footnotes.lua:9: in upvalue 'func'
  core/utilities.lua:398: in field '?'
  core/inputs-common.lua:66: in function 'core/sile.process'
  core/inputs-texlike.lua:149: in field 'process'
  core/sile.lua:196: in function 'core/sile.readFile'
  ./sile:56: in function <./sile:56>
  [C]: in function 'xpcall'
  ./sile:56: in main chunk
  [C]: in ?
\line
\end{verbatim}

Sometimes it’s useful for you to try out Lua code within the SILE environment;
SILE contains a REPL (read-evaluate-print loop) for you to enter Lua code and print the results back to you.
If you call SILE with no input file name, it enters the REPL:

\begin{verbatim}
\sileversion
> \em{l = SILE.length.parse("22mm")}
> \em{l.length}
62.3622054
\end{verbatim}

At any point during the evaluation of Lua commands, you can call \code{SILE.repl()} to enter the REPL and poke around;
hitting Ctrl-D will end the REPL and return to processing the document.

Two alternative backends are also useful for debugging.
Both use the same shaping engine as the default \code{libtexpdf} backend,
but instead of actually generating a PDF they only output some textual information about what’s going on.
The \code{debug} backend (activated by calling \code{sile -b debug <input>})
will generate a log file with a \code{.debug} extension detailing each string and it’s exact output loction.
A simpler \code{text} backend (\code{sile -b text <input>}) will output a \code{.txt}
file with just the text strings with rough approximations of line breaks.
Either may be sent to STDOUT instead of files using \code{-o /dev/stdout}.

\section{Conclusion}

We’ve seen not just the basic functionality of SILE but also given you some examples of how to extend it in new directions;
how to use the SILE API to solve difficult problems in typesetting. Go forth and create your own SILE packages!
\end{document}
