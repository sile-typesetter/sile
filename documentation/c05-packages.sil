\begin{document}
\chapter{SILE Packages}

SILE comes with a number of standard packages which provide additional functionality.
In fact, the actual “core” of SILE’s functionality is small and extensible, with most of the interesting features being provided by add-on packages.
SILE ships with the core libraries plus a small collection of packages covering some common needs; more can be added from 3rd party sources.
SILE packages are written in the Lua programming language, and can define new commands, change the way that the SILE system operates, or indeed do anything that is possible to do in Lua.

\section{Loading a package}

Loading a package is done through the \code{\\use} command.
By convention packages live in a \code{packages/}
For instance, we’ll soon be talking about the \autodoc:package{grid} package, which normally can be found as \code{sile/packages/grid/init.lua} in wherever your system installed the SILE resource files.
To load this, we’d say:

\begin[type=autodoc:codeblock]{raw}
\use[module=packages.grid]
\end{raw}

\autodoc:note{
By default SILE will look for packages in a variety of directories:

\begin{enumerate}
\item{The directory where your input source file is located.}
\item{The current working directory.}
\item{The environment variable \code{SILE_PATH}, if defined.}
\item{The default Lua search path.}
\item{Various directories depending on where and how SILE is installed on your system.}
\end{enumerate}

SILE does not descend into subdirectories when looking for a file.
If you have arranged your personal class or package files into subdirectories,
you will need to provide a full relative path to them.}

\section{The SILE ecosystem}

The SILE installation includes a core collection of modules we hope are generally useful.
But there’s more out there!
As mentioned earlier in this manual, a number of third-party contributed collections of modules can be installed via the LuaRocks package manager.

\autodoc:note{
A non-authoritative list of third-party modules may be consulted at \href{https://luarocks.org/m/sile}. To publish your own modules to LuaRocks, see the \code{package-template.sile} repository.
}

A SILE compatible LuaRock simply installs the relevant class, package, language, internationalization resources, or similar files in a \code{sile} directory.
This directory could be in your system Lua directory, in your user directory, or any other location you specify.

By default, LuaRocks will install these modules to the Lua search path.

\begin[type=autodoc:codeblock]{raw}
$ luarocks install markdown.sile
$ sile ...
\end{raw}

Depending on your system, this probably requires root permissions.
If you either don’t have root permissions or don’t want to pollute your system’s root file system, you can also install as a user.
To use packages installed as a user you will need to have LuaRocks add its user tree to your Lua search path before running SILE.

\begin[type=autodoc:codeblock]{raw}
$ luarocks --local install markdown.sile
$ eval $(luarocks --local path)
$ sile ...
\end{raw}

Of course, you can add that eval statement to your shell profile to always include your user directory in your Lua path.
You can also add your own entries to the top of the search path list by setting the \code{SILE_PATH} variable. For example:

\begin[type=autodoc:codeblock]{raw}
$ export SILE_PATH="/path/to/my/library/"
$ sile ...
\end{raw}

Note that modules are not limited to just packages.
They can include classes, languages, internationalization resources, or anything else provided by SILE.\footnote{%
Also because external locations are searched before SILE itself, they can even override any core part of SILE itself.
As such you should probably make sure you review what a package does before installing it!}

\use[module=packages.unichar]
\define[command=status:high]{\font[size=9pt]{\color[color=green]{\font[family=Symbola]{\unichar{U+25CF}} Good maturity}}\novbreak\noindent}
\define[command=status:medium]{\font[size=9pt]{\color[color=olivedrab]{\font[family=Symbola]{\unichar{U+25CD}} Usable with limitations}}\novbreak\noindent}
\define[command=status:low]{\font[size=9pt]{\color[color=darkslateblue]{\font[family=Symbola]{\unichar{U+25CB}} Experimental}}\novbreak\noindent}

\section{Graphics}

As well as processing text, SILE can also include images.

\subsection{image}
\status:high
\package-documentation{image}

\subsection{svg}
\status:medium
\package-documentation{svg}

\subsection{converters}
\status:medium
\package-documentation{converters}

\section{Text & Characters}

This section covers a range of different topics from initial capitals to text transforms, through URL formatting.

\subsection{dropcaps}
\status:high
\package-documentation{dropcaps}

\subsection{lorem}
\status:high
\package-documentation{lorem}

\subsection{textcase}
\status:high
\package-documentation{textcase}

\subsection{unichar}
\status:high
\package-documentation{unichar}

\subsection{url}
\status:high
\package-documentation{url}

\subsection{gutenberg}
\status:low
\package-documentation{gutenberg}

\section{Colors}

Color perception is a complicated topic, depending on many factors.
SILE currently provides a few packages for handling coloring, in a simple acceptation of the term.

\subsection{color}
\status:medium
\package-documentation{color}

\subsection{background}
\status:medium
\package-documentation{background}

\section{Fillers & Rules}

Line-filling patterns or rules, rectangular blobs of inks... What else to say?

\subsection{leaders}
\status:high
\package-documentation{leaders}

\subsection{rules}
\status:high
\package-documentation{rules}

\section{Boxes & Effects}

You can manipulate boxed elements to achieve a variety of effects.

\subsection{raiselower}
\status:high
\package-documentation{raiselower}

\subsection{rebox}
\status:high
\package-documentation{rebox}

\subsection{rotate}
\status:medium
\package-documentation{rotate}

\subsection{scalebox}
\status:high
\package-documentation{scalebox}

\section{Mathematical formulas}
\status:medium
\package-documentation{math}

\section{Specialized environments}

SILE’s standard set of packages provides a few high-level environment.
Some are quite expected from a typesetting system, and other also possibly serve as an illustration for class and package designers, regarding how to use varying techniques.

\subsection{lists}
\status:high
\package-documentation{lists}

\subsection{pullquote}
\status:medium
\package-documentation{pullquote}

\subsection{verbatim}
\status:medium
\package-documentation{verbatim}

\subsection{specimen}
\status:high
\package-documentation{specimen}

\subsection{boustrophedon}
\status:high
\package-documentation{boustrophedon}

\subsection{chordmode}
\status:high
\package-documentation{chordmode}

\section{Advanced font features}

The following packages leverage SILE’s font default handling and the \autodoc:command{\font} command with new capabilities.

\subsection{features}
\status:high
\package-documentation{features}

\subsection{font-fallback}
\status:medium
\package-documentation{font-fallback}

\section{Advanced line-spacing}

We will later document the default line-spacing algorithm used by SILE and the available settings that may be tuned.
Still, some packages are proposed for \em{altering} that algorithm and may be useful in some contexts.

\subsection{grid}
\status:medium
\package-documentation{grid}

\subsection{linespacing}
\status:low
\package-documentation{linespacing}

\section{Document parts}

You \em{probably} don’t need to load the auxiliary packages in this section directly.
Their main job is to provide more basic functionality to other packages and classes.
Classes compose functionality from different auxiliary packages.
Nevertheless, these packages also provide several user-facing commands of interest.

\subsection{folio}
\status:high
\package-documentation{folio}

\subsection{footnotes}
\status:medium
\package-documentation{footnotes}

\subsection{tableofcontents}
\status:medium
\package-documentation{tableofcontents}

\section{Bibliographies & Indexes}

This section is devoted to packages collating references, in a broad sense.

\subsection{bibtex}
\status:medium
\package-documentation{bibtex}

\subsection{indexer}
\status:low
\package-documentation{indexer}

\section{Miscellaneous utilities}

This section introduces packages that could not fit in another category.

\subsection{date}
\status:high
\package-documentation{date}

\subsection{debug}
\status:high
\package-documentation{debug}

\subsection{ifattop}
\status:low
\package-documentation{ifattop}

\subsection{retrograde}
\status:high
\package-documentation{retrograde}

\section{Frames and page layouts}

As we mentioned in the first chapter, SILE uses frames as an indication of where to put text onto
the page.

\subsection{cropmarks}
\status:low
\package-documentation{cropmarks}

\subsection{frametricks}
\status:low
\package-documentation{frametricks}

\subsection{twoside}
\status:medium
\package-documentation{twoside}

\subsection{masters}
\status:high
\package-documentation{masters}

\subsection{break-firstfit}
\status:medium
\package-documentation{break-firstfit}

\subsection{balanced-frames}
\status:low
\package-documentation{balanced-frames}

\section{Low-level internal packages}

In addition, there are packages that you \em{very probably} don’t need to use directly when typesetting documents.

\subsection{bidi}
\status:high
\package-documentation{bidi}

\subsection{color-fonts}
\status:high
\package-documentation{color-fonts}

\subsection{counters}
\status:high
\package-documentation{counters}

\subsection{insertions}
\status:medium
\package-documentation{insertions}

\subsection{infonode}
\status:high
\package-documentation{infonode}

\subsection{inputfilter}
\status:high
\package-documentation{inputfilter}

\subsection{chapterverse}
\status:low
\package-documentation{chapterverse}

\subsection{parallel}
\status:low
\package-documentation{parallel}

\subsection{autodoc}
\status:high
\package-documentation{autodoc}

\subsection{pdf}
\status:medium
\package-documentation{pdf}

\subsection{pdfstructure}
\status:medium
\package-documentation{pdfstructure}

\section{Highly experimental packages}

The following packages are not documented here:
\autodoc:package{complex-spaces},
\autodoc:package{pagebuilder-bestfit},
\autodoc:package{pandoc},
\autodoc:package{simpletable},
\autodoc:package{xmltricks}.

\autodoc:note{These packages are not ready for use in production and are subject to change without notice in future versions.}

\end{document}
