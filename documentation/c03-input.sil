\begin{document}
\chapter{SILE’s Input Language}

Let’s now go back and reconsider the first SILE file we saw:

\begin{verbatim}
\line
\\begin\{document\}
Hello SILE!
\\end\{document\}
\line
\end{verbatim}

\section{Defining the paper size}

A document starts with a \code{\\begin\{document\}} command and ends with \code{\\end\{document\}}.
In between, SILE documents are made up of two elements: text to be typeset on the page, such as “Hello SILE!” in our example, and commands.

The default paper size is A4, although each class may override this value.
To manually change the paper size, an optional argument may be added to the document declaration:

\begin{verbatim}
\line
\\begin[papersize=letter]\{document\}
\line
\end{verbatim}

SILE knows about the ISO standard A, B and C series paper sizes using names a4, b5, etc.
Also available are presets for some traditional sizes:
a0, a1, a10, a2, a3, a4, a5, a6, a7, a8, a9, ansia, ansib, ansic, ansid, ansie, archa, archb, archc, archd, arche, arche1, arche2, arche3, b0, b1, b10, b2, b3, b4, b5, b6, b7, b8, b9, c2, c3, c4, c5, c6, c7, c8, comm10, csheet, dl, dsheet, esheet, executive, flsa, flse, folio, halfexecutive, halfletter, ledger, legal, letter, monarch, note, quarto, statement, and tabloid.

If you need a paper size for your document which is not one of the standards,
then you can specify it by dimensions:

\code{papersize=\em{<measurement> x <measurement>}}.

SILE knows a number of ways of specifying a measurement.
A \code{<measurement>} as mentioned above can be specified as a floating-point number followed by a unit abbreviation.
Acceptable units include printer’s points (\code{pt}), millimeters (\code{mm}), centimeters (\code{cm}), or inches (\code{in}).
(You can even use feet (\code{ft}) or meters (\code{m}) if you are typesetting \em{particularly} large documents or twips (\code{twip}) for \em{particularly} small documents.)
For instance, a standard B-format book can be specified by \code{papersize=198mm x 129mm}.

Once some of the basic document properties have been setup using these fixed size units, other dimensions may be specified relative to them, using \em{relative units}.
For example once the paper size is set, percentage of page width (\code{\%pw}) and height(\code{\%ph}) become valid units.
In chapter 4 we will meet more of these relative units, and in chapter 7 we will meet some other ways of specifying lengths to make them stretchable or shrinkable.

\section{Ordinary text}

On the whole, ordinary text isn’t particularly interesting—it’s just typeset.

\note{TeX users may have an expectation that SILE will do certain things with
ordinary text as well. For instance, if you place two straight-backquotes
into a TeX document (like this: \code{``}) then TeX will magically turn that
into a double opening quote (“). SILE won’t do this. If you want a double
opening quote, you have to ask for one. Similarly, en- and em-dashes have to be
input as actual Unicode characters for en- and em-dashes, rather than the
pseudo-ligatures such as \code{--} or \code{---} that TeX later transforms to
the Unicode characters.}

There are only a few bits of cleverness that happen around ordinary text.

The first is that space is not particularly significant. If you write
\code{Hello {} {} SILE!} with three spaces, you get the same output as if you
write \code{Hello SILE!} with just one. Space at the beginning of a line will
be ignored.

Similarly, you can place a line break anywhere you like in the input file, and
it won’t affect the output because SILE considers each paragraph at a time and
computes the appropriate line breaks for the paragraph based on the width of
the line available. In other words, if your input file says

\begin{verbatim}
\line
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
\line
\end{verbatim}

\noindent{}…you might not necessarily get a line break after ‘tempor’; you’ll
get a line break wherever is most appropriate. In the context of this document,
you’ll get:

\line
\nohyphenation{\examplefont{Lorem ipsum dolor sit amet, consectetur adipisicing
elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip
ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat
cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est
laborum.}}
\line

In other words, a line break is converted to a space.

\note{Sometimes this conversion is not what you want. If you don’t want single
line breaks to be converted to a space, use a comment character \code{\%} at
the end of a line to suppress the additional whitespace.}

When you want to end a paragraph, you need to input two line breaks in a row,
like this:

\begin{verbatim}
\line
Paragraph one.

Paragraph two.
This is not paragraph three.

This is paragraph three.
\line
\end{verbatim}

The second clever thing that happens around ordinary text is that a few—four,
in fact—characters have a special meaning to SILE. All of these will be
familiar to TeX users.

We’ve seen that a \em{backslash} is used to start a command, and we’ll look
into commands in more detail soon. \em{Left and right curly braces} (\code{\{},
\code{\}}) are used for grouping, particularly in command arguments. Finally,
a \em{percent sign} is used as a comment character, meaning that everything
from the percent to the end of the line is ignored by SILE. If you want to
actually typeset these characters, prepend a backslash to them: \code{\\\\}
produces ‘\\’, \code{\\\{} produces ‘\{’, \code{\\\}} produces ‘\}’, and
\code{\\\%} produces ‘\%’.

The third clever thing is SILE will automatically hyphenate text at the end of
a line if it feels this will make the paragraph shape look better. Text is
hyphenated according to the current language options in place. By default, text
is assumed to be in English unless SILE is told otherwise. In the Latin text
above, we turned hyphenation off.

The final clever thing is that, where fonts declare ligatures (where two or
more letters are merged into one in order to make them visually more
attractive), SILE automatically applies the ligature. So if you type
\code{affluent fishing} then, (depending on your font), your output might look
like: ‘\examplefont{affluent fishing}.’ If you specifically want to break up
the ligatures, then insert empty groups (using the grouping characters
\code{\{} and \code{\}}) in the middle of the possible ligatures: \code{af\{\}f\{\}luent
f\{\}ishing}: \examplefont{af{}f{}luent f{}ishing}. See the section on
the \code{features} package for more information on how to control the display
of ligatures and other font features.

\section{Commands}

Typically (and we’ll unpack that statement later), SILE commands are made up of
a backslash followed by a command name, and a document starts with
a \code{\\begin\{document\}} command and ends with \code{\\end\{document\}}.

A command may also take two other optional components: some \em{parameters},
and an \em{argument}. The \code{\\begin} command at the start of the document
is an example of this.\footnote{Strictly speaking \code{\\begin} isn’t actually
a command but we’ll pretend that it is for now and get to the details in
a moment.}

\begin{verbatim}
\line
\\begin\{document\}
\line
\end{verbatim}

The parameters to a command are enclosed in square brackets and take the form
\code{\em{key}=\em{value}};\break{}multiple parameters are separated by commas
or semicolons, as in \code{[key1=value1,key2=value2,…]} Spaces around the
keys are not significant; we could equally write that as \code{[key1 = value1;
key2 = value2; …]}. If you need to include a comma or semicolon within the
value to a parameter, you can enclose the value in quotes: \code{[key1
= "value1, still value 1", key2 = value2; …]}.

The optional argument (of which there can only be at most one) is enclosed in curly braces.
\footnote{TeX users may forget this and try adding a command argument “bare”, without the braces.
This won’t work; in SILE, the braces are always mandatory.}
Because the argument is optional, there is a difference between this: \code{\\command\{args\}} (which is interpreted as a command with argument \code{args}) and \code{\\command \{args\}} (which is interpreted as a command with no arguments, followed by the word \command{args} in a new group).

Here are a few more examples of SILE commands:

\begin{verbatim}
\line
\\eject                                   \% A command with no parameters or argument

\\font[family=Times,size=10pt]            \% Parameters, but no argument

\\chapter\{Introducing SILE\}               \% Argument but no parameters

\\font[family=Times,size=10pt]\{Hi there!\} \% Parameters and argument
\line
\end{verbatim}%
\section{Environments}

Commands like \code{\\chapter} and \code{\\em} (emphasises text by making it italic) are normally used to enclose a relatively small piece of text; a few lines at most.
Where you want to enclose a larger piece of the document, you can use an \em{environment}; an environment begins with \code{\\begin\{\em{name}\}} and encloses all the text up until the corresponding \code{\\end\{\em{name}\}}.
We’ve already seen an example, the \code{document} environment, which must enclose the \em{entire} document.

Here is a secret: there is absolutely no difference between a command and an environment.
In other words, the following two forms are equivalent:

\begin{verbatim}
\line
\\font[family=Times,size=10pt]\{Hi there!\}

\\begin[family=Times,size=10pt]\{font\}
Hi there!
\\end\{font\}
\line
\end{verbatim}

However, in some cases the environment form of the command will be easier to read and will help you to be clearer on where the command begins and ends.

\section{The XML Flavour}

While we’re on the subject of alternative forms, SILE can actually process its input in a completely different file format.
What we’ve seen so far has been SILE’s “TeX-like flavor”, but it can also directly read and process XML files.
(If it isn’t well-formed XML, then SILE will get very upset.)

Any XML tags within the input file will then be regarded as SILE commands, and tag attributes are interpreted as command parameters.
Once read and parsed, processing content from either of the two file formats are exactly equivalent.

In other words, the XML form of the above document would be:

\begin{verbatim}
\line
<document>
Hello SILE!
</document>
\line
\end{verbatim}

Commands without an argument need to be well-formed self-closing XML tags (for instance, \code{<break/>}), and commands with parameters should have well-formed attributes.
The example above, in XML flavor, would look like this:

\begin{verbatim}
\line
<font family="Times" size="10pt">Hi there!</font>
\line
\end{verbatim}

We don’t expect humans to write their documents in SILE’s XML flavor—the TeX-like SILE flavor is much better for that—but having an XML flavor allows for computers to deal with SILE a lot more easily.
One could create graphical user interfaces to edit SILE documents, or convert other XML formats to SILE.

However, there is an even smarter way of processing XML with SILE.
For this, you need to know that you can define your own SILE commands, which can range from very simple formatting to fundamentally changing the way that SILE operates.
If you have a file in some particular XML format—let’s say it’s a DocBook file—and you define SILE commands for each possible DocBook tag, then the DocBook file becomes a valid SILE input file, as-is.

In the final two chapters, we’ll provide some examples of defining SILE commands and processing XML documents.
\end{document}
