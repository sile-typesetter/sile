\begin{document}
\chapter{SILE Macros and Commands}

\noindent One of the reasons that we use computers is that they are
very good at doing repetitive jobs for us, so that we don’t have to.
Perhaps the most important skill in operating computers, and particularly
in programming computers, is noticing areas where an action is being
repeated, and allowing the computer to do the work instead of the human.
In other words, Don’t Repeat Yourself.

The same is true in operating SILE. After you have been using the
system for a while, you will discover that there are patterns of input
that you need to keep entering again and again.

\section{A simple macro}

\define[command=SILE]{\font[family=Gentium Plus]{% Book Basic has no +smcp, but readers don't need to know, since we're only using Book Basic as a holdover from old SILE which did.
S\lower[height=0.5ex]{I}L\kern[width=-.2em]\raise[height=0.6ex]{\font[features=+smcp]{e}}}}
For instance, let’s suppose that we want to design a nice little
“bumpy road” logo for SILE. (Afficionados of T\kern[width=-.1667em]\lower[height=0.5ex]{E}\kern[width=-.125em]X and friends will be familiar with the concept of
bumpy road logos.) Our logo will look like this: \SILE. It’s not a great
logo, but we’ll use it as \SILE’s logo for the purposes of this section.

To typeset
this logo, we need to ask \SILE to: typeset an ‘S’; typeset an ‘I’ lowered by
a certain amount (half an ex, as it happens); typeset an ‘L’; walk backwards
along the line a tiny bit; typeset a smaller-sized ‘E’ raised by a certain
amount, using the \code{features} package to choose a small capital ‘E’.

In \SILE code, that looks like:

\begin{verbatim}
\line
S\%
\\lower[height=0.5ex]\{I\}\%
L\%
\\kern[width=-.2em]\\raise[height=0.6ex]\{\\font[features=+smcp]\{e\}\}\%
\line
\end{verbatim}

(Don’t worry about the \code{\\kern} command for the moment; we’ll come back
to that later. The \code{\%}’s prevent newlines from becoming spaces.)

We’ve used our logo four times already in this chapter, and we don‘t want to
have to input that whole monstrosity each time we do so. What we would like
to do is tell the computer “this is \SILE’s logo; each time I enter \code{\\SILE},
I want you to interpret that as \code{S\\lower[height=0.5ex]\{I\}L\\kern[\goodbreak{}width=-.2em]\\raise[height=0.6ex]\{\\font[features=+smcp]\{e\}\}}”.

In other words, we want to define our own commands.

SILE\footnote{Let’s give up on the logo at this point.} allows you to define
your own commands in two ways. The simplest commands of all are those like
\code{\\SILE} above: “when I write \code{\\x}, I
want SILE to pretend that I had written \code{X \\Y Z} instead.” These are
called \em{macros}, and the process of pretending is called \em{macro expansion}.

You can define these kinds of macros within a SILE file itself. In this
very file, we entered:

\begin{verbatim}
\line
\\define[command=SILE]\{\%
S\%
\\lower[height=0.5ex]\{I\}\%
L\%
\\kern[width=-.2em]\\raise[height=0.6ex]\{\\font[features=+smcp]\{e\}\}\%
\}
\line
\end{verbatim}

We are using the built-in SILE command \code{\\define}. \code{\\define} takes
an option called \code{command}; its value is the name of the command we
are defining. The content of the \code{\\define} command is a series of SILE instructions to
be executed when the command is used.

\begin{note}
At this point it’s worth knowing the precise rules for allowable
names of SILE commands.

Commands in XML-flavor input files must be allowable XML tag names or else your
input files will not be well formed. Command names in TeX-flavor input files
may consist of any number of alphanumeric characters, hyphens or colons.
Additionally, any single character is a valid TeX-flavor command name. (Hence
\code{\\\\} for typesetting a backslash.)

When it comes to defining commands, commands defined by an XML-flavor file can
actually have any name that you like—even if they are not accessible from
XML-flavor! (You may define oddly-named commands in a XML-flavor SILE file
and then use them in a TeX-flavor SILE file.) Commands defined in TeX-flavor
obviously have to have names which are valid parameter values, or else they will
not parse correctly either; parameter values happen to consist
of any text up until the nearest comma, semicolon or closing square bracket.
\end{note}

\section{Macro with content}

Now let’s move on to the next level; sometimes you will want to create
commands which are not simply replacements, but which have arguments of their
own. As an example, let’s say we use the \code{color} package to turn a bit of
text red \color[color=red]{like this}. The usual way to do that is to say

\begin{verbatim}
\line
\\color[color=red]\{like this\}
\line
\end{verbatim}

However, we‘re not always going to want to be highlighting the words ‘\code{like this}’.
We might want to be able to highlight other text instead. We need the ability
to wrap the command \code{\\color\break{}[color=red]\{ ... \}} around our chosen content.
In other words, we want to be able to define our own commands which take arguments.

The way we express this in SILE is with the \code{\\process} command. \code{\\process}
is only valid within the context of a \code{\\define} command (you’ll mess everything
up if you try using it somewhere else), and it
basically means ‘do whatever you were planning to do with the arguments to this
command.’ So if we want to a command which makes things red, we can say:

\begin{verbatim}
\line
\\define[command=red]\{\\color[color=red]\{\\process\}\}

…

Making things red is a \\red\{silly\} way to emphasise text.
\line
\end{verbatim}

\begin{note}
You can’t call \code{\\process} more than once within the same macro.

In the definition of the \code{\\chapter} command, we want to 1) display the
chapter name in a big bold font, and 2) use the chapter name as the left
running header. If you try writing the \code{\\chapter} command as a macro,
you will get stuck—once you’ve \code{\\process}ed the chapter name to display
it in bold, you won’t be able to process it again to set the running header.

So the \code{\\chapter} command cannot be written as a simple macro. The other
way to implement your own commands is to write them in the Lua programming
language, which is what happens for \code{\\chapter}. This is deliberate:
the \code{\\define} command really is meant to be used just for simple
things, because we believe that programming tasks should be done in a
programming language. So don’t be afraid to write your own commands in Lua–it’s
not too difficult, and if you’re creating any serious document format yourself
(rather than processing a document using a class that someone else has written
or adding minor formatting tweaks through customization hooks that classes
give you) you should expect to write it in Lua, as you’re almost certainly
going to need to do so. We will see how to do this in later chapters.
\end{note}

\section{Nesting macros}

That said, one thing you can do is to call a macro within a macro. This should
be obvious, because a macro is just a replacement for the current processing
step—when SILE reads a macro command, it behaves as if you had entered the
definition of the macro instead, and of course such a definition can contain
other commands.

So it is possible even within the simple scope of macro processing to achieve
quite a lot of automation.

For instance, within this book, there have been a number of notes—italicized
paragraphs between two heavy lines with a left margin. These have been typeset
with the \code{\\note} command; this is not a built-in command but a macro
specified within the \code{documentation/macros.sil} file included by this document.
Here is one way to define \code{\\note}, in XML flavour:

\begin{verbatim}
\line
<define command="line">
  <par/><smallskip/><noindent/>
  <hrule width="450pt" height="0.3pt"/><par/>
  <novbreak/><smallskip/><novbreak/>
</define>

<define command="narrower">
  <set parameter="document.lskip" value="24pt"/>
  <process/>
  <set parameter="document.lskip" value="0pt"/>
</end>

<define command="notefont"><font style="italic" size="10pt"><process/></font></notefont>

<define command="note">
  <narrower>
    <line/>
    <notefont><process/></notefont>
    <line/>
  </narrower>
</define>
\line
\end{verbatim}

The only command we have not yet met here is \code{\\set}, which we will now
investigate.
\end{document}
