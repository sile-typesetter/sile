\begin{document}
\chapter{Multilingual Typesetting}

One thing we’re pretty proud of is SILE’s language support.
Typesetting conventions differ both from script to script and from language to language.
SILE aims to support quality typesetting across all script and language families.
As an open source project we can collaborate on support for locales that commercial systems do not consider worthwhile.
We want to make it easy for minority languages and scripts to implement their own typographic conventions.

\section{Selecting languages}

For SILE to know how to typeset text you will need to tell it what language your text is in!
There are two ways to do this:
as part of the \code{\\font[language=...]} command as detailed in chapter 4,
or by use of the \code{\\language[main=...]} command.
Both of these expect an ISO639-1 language code such as \code{en} for English, \code{ar} for Arabic, and so on.

Selecting a language by either method loads up the \em{language support} file(s) for that language.
These in turn enable various localization and typesetting conventions.
Language support may include and combination of:

\noindent{}• hyphenation patterns,

\noindent{}• line breaking and justification schemes,

\noindent{}• frame advance and writing direction,

\noindent{}• spacing,

\noindent{}• choice of glyphs within a font,

\noindent{}• localization of programatially inserted strings,

\noindent{}• and more.

For example, Sindhi and Urdu users will expect the Arabic letter \em{heh} (\font[family=LateefGR]{ه}) to combine with other letters in different ways to standard Arabic shaping.
In those cases, you should ensure that you select the appropriate language before processing the text:

\bidi-on
\begin{verbatim}
\line
Standard Arabic:
\\font[family=LateefGR,language=ar]\{\font[family=LateefGR]{ه{}ه{}ه}\};
then in Sindi:
\\font[family=LateefGR,language=snd]\{\font[family=LateefGR]{ه{}ه{}ه}\};
then in Urdu:
\\font[family=LateefGR,language=urd]\{\font[family=LateefGR]{ه{}ه{}ه}\}.
\line
\end{verbatim}

\begin{examplefont}
\line
Standard Arabic: \font[family=LateefGR,language=ar]{ههه};
then in Sindi: \font[family=LateefGR,language=snd]{ههه};
then in Urdu: \font[family=LateefGR,language=urd]{ههه}.
\line
\end{examplefont}
\bidi-off

\section{Direction}

SILE is written to be \em{direction-agnostic}, which means that it has
no fixed idea about which way text should flow on a page: Latin scripts
are generally written left-to-right with individual lines starting from
the top of the page and advancing towards the bottom. Japanese can be
written in the same way, but traditionally is typeset down the page with
lines of text moving from the right of the page to the left.

To describe this, SILE uses the concept of a \em{writing direction},
which denotes the way each individual line appears on the page —left
to right for Latin scripts, right to left for Arabic, Hebrew and so on,
top to bottom for traditional Japanese— and a \em{page advance direction},
which denotes the way the lines “stack up”. Each of these directions can
take one of four values: \code{LTR}, \code{RTL}, \code{TTB} and \code{BTT}.
A \em{direction specification} is made up of either a writing direction
(\code{LTR} or \code{RTL}), in which case the page advance direction is
understood to be \code{TTB}, or a writing direction and a page advance
direction joined by a hyphen.

Each frame has its own writing direction. By default, this is \code{LTR-TTB}.
Normally you would set the writing direction once, in the master frames of
your document class. One easy way to do this in the \code{plain} document
class is to pass the \code{direction=...} parameter to the
\code{\\begin\{document\}} command. For example, Mongolian is written top
to bottom with text lines moving from the left to the right of the page,
so to create a Mongolian document, use:

\begin{verbatim}
\line
\\begin[direction=TTB-LTR]\{document\}
\\font[language=mo,family=Noto Sans Mongolian]
...
\\end\{document\}
\line
\end{verbatim}

To change the writing direction for a single frame, use
\code{\\thisframedirection[direction=...]}.

SILE uses the Unicode bidirectional algorithm to handle texts written in
mixed directionalities. See \url{https://sile-typesetter.org/examples/i18n.sil}
for an example which brings together multiple scripts and directionalities.

\section{Hyphenation}

SILE hyphenates words based on its current language. (Language is set using the
\code{\\font} command above.) SILE comes with support for hyphenating a wide
variety of languages, and also aims to encode specific typesetting knowledge about
languages.

The default hyphen character is “-”, which can be tweaked by the \code{\\font}
parameter \code{hyphenchar}. It accepts a Unicode character or Unicode codepoint
in \code{[Uu]+<code>} or Hexadecimal \code{0[Xx]<code>} format – for instance
\code{\\font[family=Rachana,language=ml,hyphenchar=U+200C]}.

SILE comes with a special “language” called \code{und}, which has no hyphenation
patterns available. If you switch to this language, text will not be hyphenated.
The command \code{\\nohyphenation\{…\}} is provided as a shortcut for
\code{\\font[language=und]\{…\}}.

The hyphenator uses the same algorithm as TeX and can use TeX hyphenation
pattern files if they are converted to Lua format. To implement hyphenation
for a new language, first check to see if TeX hyphenation directionaries
are available; if not, work through the resources at
\url{http://tug.org/docs/liang/}.

\section{Localization}

A small handfull of strings may be programatically added to documents depending on language, context, and options.
For example by default in English the \code{book} class will prepend “Chapter ” before chapter numbers output by the \code{\\chapter} command.
These localized strings are managed internally using the Fluent localization system.
See Project Fluent (\url{https://projectfluent.org}) for details on the data format and uses.
Some default localizations are provided for a handful of languages, but it is quite likely SILE will not (yet) have your language.
Even if it does, it may not use the localization of your choice.

All default localizations can be easily overridden and new locales can easily be added in your document or project.
Additionally the Fluent localization system is exposed and can be used for your localization purposes.

To set a new value for a message (or messages), simply use the \code{\\ftl} command.
The contents passed to the command will be parsed as new messages and loaded in the locale for the current document language.
Optionally messages may be loaded into a different locale with \code{\\ftl[locale=<locale>]}.
You can also load messages from an external ftl file with \code{\\ftl[src=<filename>]}.

To output a localized message, pass the message id to the \code{\\fluent} command.
The current document languages determines the locale used, or a locale option may be passed.
Fluent parameters may also be passed as options.

For example a \code{hello} message is available in SILE, and in an English context such as this manual \code{\\fluent[name=World]\{hello\}} will output “\fluent[name=World]{hello}”.
To get the localization in Turkish, try \code{\\fluent[name=World,locale=tr]\{hello\}} to get “\fluent[name=World,locale=tr]{hello}”.
Now lets change the message with \code{\\ftl[locale=tr]\{hello = Selam \{ $name \}!\}}\ftl[locale=tr]{hello = Selam { $name }!} and try again.
This time \code{\\fluent[name=Dünyalılar,locale=tr]\{hello\}} will output “\fluent[name=Dünyalılar,locale=tr]{hello}”.

A particularly common string to override might be the table of contents heading:

\begin{verbatim}
\line
\\ftl\{toc-heading = Table of Contents\}
\\tableofcontents
\line
\end{verbatim}

\section{Support for specific languages}

The following section shows some of the support features that SILE provides
for specific languages apart from hyphenation and language-specific glyph
selection:

\subsection{Amharic}

SILE inserts word break opportunities after Ethiopic word spaces and full
stops. Amharic can be typeset in two styles: with space surrounding
punctuation or space after punctuation. You can set the setting
\autodoc:setting[check=false]{languages.am.justification} to either \code{left} or \code{centered}
to control which style is used. The default is \code{left}

\begin{verbatim}
\line
\\font[family=Noto Sans Ethiopic,language=am]
\font[family=Noto Sans Ethiopic]{ሰላም፡ልዑል}

\\set[parameter=languages.am.justification,value=centered]
\font[family=Noto Sans Ethiopic]{ሰላም፡ልዑል}
\line
\end{verbatim}

\font[family=Noto Sans Ethiopic,language=am]{ሰላም፡ልዑል}

\set[parameter=languages.am.justification,value=centered]
\font[family=Noto Sans Ethiopic,language=am]{ሰላም፡ልዑል}

\subsection{French}

In French typesetting, there is normally a non-breakable space between text
and “high” punctuation (a thin fixed space before question marks, exclamation
marks, semicolons and an inter-word space before colons), and also spaces
within “guillemets” (quotation marks). SILE will automatically apply the
correct space. The size of these spaces is determined by
\autodoc:setting[check=false]{languages.fr.thinspace},
\autodoc:setting[check=false]{languages.fr.colonspace} and
\autodoc:setting[check=false]{languages.fr.guillspace}.

\subsection{Japanese / Chinese}

SILE aims to conform with the W3G document “Requirements for Japanese Text
Layout” (\url{https://www.w3.org/TR/jlreq/}) which describes the typographic
conventions for Japanese (and also Chinese) text. Breaking rules (kinzoku
shori) and intercharacter spacing is fully supported on selecting the
Japanese language. The easiest way to set up the other elements of Japanese
typesetting such as the \em{hanmen} grid and optional vertical typesetting
support is by using the \code{jplain} class.

% See https://github.com/sile-typesetter/sile/issues/1245
\script[src=packages/ruby]

\package-documentation[src=packages/hanmenkyoshi]

\package-documentation[src=packages/tate]

\package-documentation[src=packages/ruby]

\subsection{Syllabic languages}

SILE implements syllable-based line breaking for Burmese and Javanese text.

\subsection{Uyghur}

Uyghur is the only Arabic script based language which uses hyphenation,
and SILE supports hyphenation. Because Arabic fonts aren’t normally designed
with hyphenation in mind, you may need to tweak some settings to ensure that
Uyghur is typeset correctly. As well as choosing the \code{hyphenchar} (see
the hyphenation section above), the setting \autodoc:setting[check=false]{languages.ug.hyphenoffset}
inserts a space between the text and the hyphen.

\end{document}
